name: DDD Architecture Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-ddd-rules:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Validate DDD rules
      run: |
        echo "🔍 Validating Domain-Driven Design rules..."
        python scripts/ddd-validation/validate_ddd_rules.py --verbose
        
    - name: Check domain model synchronization
      run: |
        echo "🔄 Checking domain model synchronization..."
        python scripts/ddd-validation/sync_domain_models.py --check-only
        
    - name: Validate Cursor rules are up-to-date
      run: |
        echo "📝 Checking if Cursor rules need updates..."
        python scripts/ddd-validation/generate_rules.py --update-existing
        
        # Check if any files were modified
        if ! git diff --exit-code --quiet; then
          echo "❌ Cursor rules are out of date. Run 'python scripts/ddd-validation/generate_rules.py --update-existing' and commit changes."
          git diff
          exit 1
        else
          echo "✅ Cursor rules are up to date"
        fi
        
    - name: Check ubiquitous language compliance
      run: |
        echo "🗣️ Checking ubiquitous language compliance..."
        
        # Check for banned terms in domain files
        banned_terms=("ticker" "security" "instrument" "candle" "quote" "business_date" "vendor" "feed")
        
        for term in "${banned_terms[@]}"; do
          if grep -r -i --include="*.py" "$term" src/marketpipe/domain/; then
            echo "❌ Found banned term '$term' in domain layer"
            exit 1
          fi
        done
        
        echo "✅ Ubiquitous language compliance check passed"
        
    - name: Validate bounded context isolation
      run: |
        echo "🏗️ Checking bounded context isolation..."
        
        # Check that domain layer doesn't import infrastructure
        if grep -r --include="*.py" -E "(import sqlite3|import requests|import httpx|import psycopg2)" src/marketpipe/domain/; then
          echo "❌ Domain layer has infrastructure dependencies"
          exit 1
        fi
        
        # Check that contexts don't cross-import domain models
        contexts=("ingestion" "validation" "storage" "integration")
        
        for context in "${contexts[@]}"; do
          if [ -d "src/marketpipe/$context" ]; then
            for other_context in "${contexts[@]}"; do
              if [ "$context" != "$other_context" ] && [ -d "src/marketpipe/$other_context" ]; then
                if grep -r --include="*.py" "from marketpipe.$other_context.domain" "src/marketpipe/$context/"; then
                  echo "❌ Context '$context' imports domain models from '$other_context'"
                  exit 1
                fi
              fi
            done
          fi
        done
        
        echo "✅ Bounded context isolation check passed"
        
    - name: Upload validation report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: ddd-validation-report
        path: |
          ddd-validation-report.txt
          domain-model-analysis.json
        retention-days: 7

  validate-architecture-tests:
    runs-on: ubuntu-latest
    needs: validate-ddd-rules
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio
        
    - name: Run architecture tests
      run: |
        echo "🏛️ Running architecture compliance tests..."
        
        # Create architecture test file if it doesn't exist
        mkdir -p tests/architecture
        
        cat > tests/architecture/test_ddd_compliance.py << 'EOF'
"""Architecture compliance tests for MarketPipe DDD implementation."""

import ast
import importlib
import inspect
from pathlib import Path
import pytest
import sys
import os

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../src'))

class TestDomainModelCompliance:
    """Test domain model compliance with DDD patterns."""
    
    def test_entities_inherit_from_base_entity(self):
        """Test that all entities inherit from Entity base class."""
        try:
            from marketpipe.domain.entities import Entity, OHLCVBar
            
            # Check that OHLCVBar inherits from Entity
            assert issubclass(OHLCVBar, Entity), "OHLCVBar should inherit from Entity"
            
            # Check that entities have ID property
            assert hasattr(OHLCVBar, 'id'), "Entity should have id property"
            
        except ImportError:
            pytest.skip("Domain entities not yet implemented")
    
    def test_value_objects_are_immutable(self):
        """Test that value objects are properly immutable."""
        try:
            from marketpipe.domain.value_objects import Symbol, Price
            import dataclasses
            
            # Check that value objects are dataclasses
            assert dataclasses.is_dataclass(Symbol), "Symbol should be a dataclass"
            assert dataclasses.is_dataclass(Price), "Price should be a dataclass"
            
            # Check that they are frozen
            assert Symbol.__dataclass_params__.frozen, "Symbol should be frozen"
            assert Price.__dataclass_params__.frozen, "Price should be frozen"
            
        except ImportError:
            pytest.skip("Domain value objects not yet implemented")
    
    def test_aggregates_manage_events(self):
        """Test that aggregates properly manage domain events."""
        try:
            from marketpipe.domain.aggregates import SymbolBarsAggregate
            
            # Check for event management methods
            methods = [method for method in dir(SymbolBarsAggregate) if not method.startswith('_')]
            
            event_methods = [m for m in methods if 'event' in m.lower()]
            assert len(event_methods) > 0, "Aggregates should have event management methods"
            
        except ImportError:
            pytest.skip("Domain aggregates not yet implemented")
    
    def test_repositories_are_interfaces(self):
        """Test that repositories are properly defined as interfaces."""
        try:
            from marketpipe.domain.repositories import ISymbolBarsRepository
            import abc
            
            # Check that repository is abstract
            assert inspect.isabstract(ISymbolBarsRepository), "Repository should be abstract"
            
            # Check that it has abstract methods
            abstract_methods = [name for name, method in inspect.getmembers(ISymbolBarsRepository) 
                              if getattr(method, '__isabstractmethod__', False)]
            assert len(abstract_methods) > 0, "Repository should have abstract methods"
            
        except ImportError:
            pytest.skip("Domain repositories not yet implemented")

class TestBoundedContextIsolation:
    """Test bounded context isolation rules."""
    
    def test_domain_layer_has_no_infrastructure_imports(self):
        """Test that domain layer doesn't import infrastructure."""
        domain_path = Path("src/marketpipe/domain")
        if not domain_path.exists():
            pytest.skip("Domain layer not yet implemented")
        
        forbidden_imports = ["requests", "httpx", "sqlite3", "psycopg2", "sqlalchemy"]
        
        for py_file in domain_path.glob("*.py"):
            if py_file.name.startswith("__"):
                continue
                
            with open(py_file, 'r') as f:
                content = f.read()
            
            try:
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, (ast.Import, ast.ImportFrom)):
                        module_name = getattr(node, 'module', None)
                        if hasattr(node, 'names'):
                            for alias in node.names:
                                name = alias.name
                                if name in forbidden_imports or (module_name and module_name in forbidden_imports):
                                    pytest.fail(f"Domain file {py_file} imports forbidden module: {name or module_name}")
            except SyntaxError:
                # Skip files with syntax errors
                pass
    
    def test_contexts_dont_cross_import_domain_models(self):
        """Test that contexts don't import each other's domain models."""
        src_path = Path("src/marketpipe")
        if not src_path.exists():
            pytest.skip("Source code not found")
        
        contexts = [d for d in src_path.iterdir() 
                   if d.is_dir() and d.name not in ["domain", "__pycache__"] and not d.name.startswith("__")]
        
        for context_dir in contexts:
            if not (context_dir / "domain").exists():
                continue
                
            for py_file in context_dir.rglob("*.py"):
                if py_file.name.startswith("__"):
                    continue
                
                with open(py_file, 'r') as f:
                    content = f.read()
                
                # Check for cross-context domain imports
                for other_context in contexts:
                    if other_context.name != context_dir.name:
                        forbidden_import = f"from marketpipe.{other_context.name}.domain"
                        if forbidden_import in content:
                            pytest.fail(f"File {py_file} imports domain models from {other_context.name} context")

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
EOF
        
        # Run the architecture tests
        python -m pytest tests/architecture/test_ddd_compliance.py -v
        
    - name: Validate domain model documentation
      run: |
        echo "📚 Validating domain model documentation..."
        
        # Check if documentation is up to date
        python scripts/ddd-validation/sync_domain_models.py --update-docs
        
        # Check if any documentation files were modified
        if ! git diff --exit-code --quiet docs/; then
          echo "❌ Domain model documentation is out of date"
          echo "Run 'python scripts/ddd-validation/sync_domain_models.py --update-docs' and commit changes"
          git diff docs/
          exit 1
        else
          echo "✅ Domain model documentation is up to date"
        fi

  generate-architecture-report:
    runs-on: ubuntu-latest
    needs: [validate-ddd-rules, validate-architecture-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Generate architecture report
      run: |
        echo "📊 Generating architecture compliance report..."
        
        # Create comprehensive report
        cat > architecture-report.md << 'EOF'
# MarketPipe DDD Architecture Compliance Report

Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## Summary

This report provides an overview of Domain-Driven Design compliance in the MarketPipe codebase.

EOF
        
        # Add domain model analysis
        echo "## Domain Model Analysis" >> architecture-report.md
        echo "" >> architecture-report.md
        
        python scripts/ddd-validation/sync_domain_models.py --check-only >> architecture-report.md 2>&1 || true
        
        echo "" >> architecture-report.md
        echo "## DDD Rules Validation" >> architecture-report.md
        echo "" >> architecture-report.md
        
        python scripts/ddd-validation/validate_ddd_rules.py --verbose >> architecture-report.md 2>&1 || true
        
        # Add bounded context overview
        echo "" >> architecture-report.md
        echo "## Bounded Contexts" >> architecture-report.md
        echo "" >> architecture-report.md
        
        if [ -d "src/marketpipe/domain" ]; then
          echo "- Core Domain: ✅ Implemented" >> architecture-report.md
        else
          echo "- Core Domain: ❌ Not implemented" >> architecture-report.md
        fi
        
        for context in ingestion validation storage integration; do
          if [ -d "src/marketpipe/$context" ]; then
            echo "- $context Context: ✅ Implemented" >> architecture-report.md
          else
            echo "- $context Context: ❌ Not implemented" >> architecture-report.md
          fi
        done
        
        echo "" >> architecture-report.md
        echo "## Cursor Rules Status" >> architecture-report.md
        echo "" >> architecture-report.md
        
        if [ -d ".cursor/rules/ddd" ]; then
          rule_count=$(find .cursor/rules/ddd -name "*.mdc" | wc -l)
          echo "- DDD Rules: ✅ $rule_count rule files generated" >> architecture-report.md
        else
          echo "- DDD Rules: ❌ Not generated" >> architecture-report.md
        fi
        
        echo "" >> architecture-report.md
        echo "## Recommendations" >> architecture-report.md
        echo "" >> architecture-report.md
        echo "1. Review and address any validation errors above" >> architecture-report.md
        echo "2. Ensure all team members are familiar with the ubiquitous language" >> architecture-report.md
        echo "3. Regularly run DDD validation scripts during development" >> architecture-report.md
        echo "4. Update domain model documentation when making changes" >> architecture-report.md
        
        cat architecture-report.md
        
    - name: Upload architecture report
      uses: actions/upload-artifact@v3
      with:
        name: architecture-compliance-report
        path: architecture-report.md
        retention-days: 30