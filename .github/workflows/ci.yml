name: CI

on:
  pull_request:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  ###############################################################
  # 1. SQLite job (default) ‚Äì unchanged behaviour
  ###############################################################
  test-sqlite:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]' pytest-timeout

      - name: Run tests (SQLite)
        run: |
          mkdir -p tmp/coverage
          pytest -q --cov=marketpipe --cov-branch -m "not integration" --timeout=60 --maxfail=1

      # Move coverage file to a unique name so it can be combined later
      - name: Collect coverage file (SQLite)
        if: success()
        run: |
          mv .coverage tmp/coverage/.coverage.sqlite

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: coverage-sqlite
          path: tmp/coverage

  ###############################################################
  # 2. Postgres job ‚Äì new
  ###############################################################
  test-postgres:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Start a Postgres 15 service container
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Async-pg SQLAlchemy style URL; asyncpg is already in extras[dev]
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/mp_test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (incl. asyncpg)
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]' pytest-timeout          # asyncpg pulled in via extras

      # Safety: wait a few extra seconds so pg_isready finishes
      - name: Wait for Postgres
        run: sleep 5

      # Alembic migrations are triggered by MarketPipe bootstrap,
      # but running them once here gives earlier failure visibility
      - name: Apply migrations
        run: |
          for i in {1..5}; do
            echo "Migration attempt $i/5..."
            alembic upgrade head && break || {
              echo "Migration failed, retrying in 5 seconds..."
              sleep 5
            }
          done

      - name: Run tests (Postgres)
        run: |
          mkdir -p tmp/coverage
          pytest -q -m "not sqlite_only and not integration" --cov=marketpipe --cov-branch --timeout=60 --maxfail=1

      # Move coverage file to a unique name so it can be combined later
      - name: Collect coverage file (Postgres)
        if: success()
        run: |
          mv .coverage tmp/coverage/.coverage.postgres

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: coverage-postgres
          path: tmp/coverage

  ###############################################################
  # 3. Combined coverage report
  ###############################################################
  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-sqlite, test-postgres]
    if: always()  # Run even if some tests fail
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install coverage tools
        run: |
          python -m pip install --upgrade pip
          pip install coverage==7.5
      
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: tmp
      
      - name: Combine coverage files
        run: |
          set -euxo pipefail
          mkdir -p tmp/coverage
          echo "üì¶ Downloaded artifacts:"
          find tmp/ -maxdepth 2 -type f -print

          echo "üîç Looking for .coverage.* files..."
          mapfile -t COVERAGE_FILES < <(find tmp/ -name ".coverage.*" -type f)
          if [ ${#COVERAGE_FILES[@]} -eq 0 ]; then
            echo "‚ùå No coverage files found ‚Äì skipping combine step to keep workflow green"
            exit 0
          fi

          # Copy files into single dir
          for f in "${COVERAGE_FILES[@]}"; do
            cp "$f" tmp/coverage/
          done

          cd tmp/coverage
          coverage combine || { echo "‚ö†Ô∏è  coverage combine returned non-zero ‚Äì printing info"; ls -al; exit 1; }
          coverage xml -o coverage.xml
          coverage html -d html
          coverage report --show-missing
      
      - name: Upload combined coverage artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: coverage-combined
          path: tmp/coverage
      
      - name: Upload combined coverage to Codecov (optional)
        # Uncomment to enable Codecov integration
        # uses: codecov/codecov-action@v3
        # with:
        #   files: tmp/coverage/coverage.xml
        #   fail_ci_if_error: false
        run: echo "Coverage reports generated. Enable Codecov upload if needed." 