name: CI

on:
  pull_request:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]'

      - name: Check config version consistency
        run: |
          python -c "
          import re
          from pathlib import Path

          # Read the version constants
          config_file = Path('src/marketpipe/config/ingestion.py').read_text()
          current_match = re.search(r'CURRENT_CONFIG_VERSION\s*=\s*[\"\'](.*?)[\"\']', config_file)
          min_match = re.search(r'MIN_SUPPORTED_VERSION\s*=\s*[\"\'](.*?)[\"\']', config_file)

          if not current_match or not min_match:
              raise RuntimeError('Could not find version constants in config file')

          current_ver = current_match.group(1)
          min_ver = min_match.group(1)

          print(f'âœ… Found CURRENT_CONFIG_VERSION: {current_ver}')
          print(f'âœ… Found MIN_SUPPORTED_VERSION: {min_ver}')

          # Basic consistency checks
          if not current_ver or not min_ver:
              raise ValueError('Version constants cannot be empty')

          if min_ver > current_ver:
              raise ValueError(f'MIN_SUPPORTED_VERSION ({min_ver}) cannot be greater than CURRENT_CONFIG_VERSION ({current_ver})')

          print('âœ… Configuration version constants are consistent')
          "

      - name: Run Black (code formatting check)
        run: black --check --diff src/ tests/

      - name: Run Ruff (linting)
        run: ruff check src/ tests/

      - name: Run MyPy (type checking)
        run: mypy src/marketpipe/
        continue-on-error: true  # Don't fail CI on type errors during development

      - name: Run core tests with coverage
        run: |
          pytest -q --cov=marketpipe --cov-branch -m "not integration" --timeout=60 --maxfail=5

      - name: Run lightweight integration tests
        run: |
          pytest -q tests/integration/ -m "not auth_required and not slow" --timeout=120 --maxfail=3
        continue-on-error: true  # Don't fail CI on integration test issues

      - name: Basic CLI validation
        run: |
          # Test help commands work
          python -m marketpipe --help
          python -m marketpipe health-check --help
          python -m marketpipe ingest-ohlcv --help

          # Test health check runs
          python -m marketpipe health-check --verbose

          # Test config validation
          echo "ingestion:" > test_config.yaml
          echo "  symbols: ['AAPL']" >> test_config.yaml
          echo "  start_date: '2023-01-01'" >> test_config.yaml
          echo "  end_date: '2023-01-01'" >> test_config.yaml
          python -m marketpipe health-check --config test_config.yaml --verbose

          # Test dry run functionality
          python -m marketpipe ingest-ohlcv --symbols AAPL --start 2023-01-01 --end 2023-01-01 --provider fake --feed-type iex --help

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          fail_ci_if_error: false

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()

    steps:
      - name: Summary
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "ðŸŸ¢ **CI PASSED** - All tests completed successfully"
            echo "- Code quality checks: âœ…"
            echo "- Core test suite: âœ…"
            echo "- CLI validation: âœ…"
            echo "- Configuration checks: âœ…"
          else
            echo "ðŸ”´ **CI FAILED** - Some tests failed"
            echo "- Check the test job logs above for details"
            echo "- Run tests locally: \`pytest -x --tb=short\`"
            echo "- Check code formatting: \`black --check src/ tests/\`"
            echo "- Check linting: \`ruff check src/ tests/\`"
            exit 1
          fi
