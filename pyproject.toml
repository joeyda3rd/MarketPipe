[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "marketpipe"
version = "0.1.0-alpha.1"
description = "Modern, Python-native ETL framework for financial market data workflows with Domain-Driven Design"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [{name = "MarketPipe Team", email = "maintainers@marketpipe.dev"}]
maintainers = [{name = "MarketPipe Team", email = "maintainers@marketpipe.dev"}]
requires-python = ">=3.9"
keywords = [
    "etl", "finance", "market-data", "trading", "data-pipeline",
    "financial-data", "ohlcv", "time-series", "alpaca", "domain-driven-design"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Typing :: Typed",
    "Environment :: Console",
    "Framework :: AsyncIO",
]

dependencies = [
    # CLI framework
    "typer>=0.9.0",
    "rich>=10.11.0",  # For colorful terminal output
    "shellingham>=1.3.0",  # For shell detection

    # Data processing
    "pandas>=2.0.0",
    "duckdb>=1.0.0",
    "pyarrow>=12.0.0",

    # HTTP clients
    "httpx>=0.24.0",
    "requests>=2.28.0",

    # Configuration and utilities
    "pyyaml>=6.0.0",
    "python-dotenv>=1.0.0",
    "humanize>=4.0.0",

    # Database support
    "aiosqlite>=0.19.0",
    "alembic>=1.13.0",
    "sqlalchemy>=2.0.0",
    "greenlet>=2.0.0",

    # Monitoring and validation
    "prometheus_client>=0.15.0",
    "pydantic>=2.0.0",

    # Utilities
    "fasteners>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/your-org/marketpipe"
Repository = "https://github.com/your-org/marketpipe"
Issues = "https://github.com/your-org/marketpipe/issues"
Discussions = "https://github.com/your-org/marketpipe/discussions"
Changelog = "https://github.com/your-org/marketpipe/blob/main/CHANGELOG.md"
Documentation = "https://github.com/your-org/marketpipe#documentation"

[project.optional-dependencies]
# Core testing dependencies - required for basic test suite
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.0.0",  # For timeout support in CI
    "pytest-xdist>=3.0.0",  # For parallel test execution (-n auto)
    "coverage>=7.5.0",
    "respx>=0.20.0",  # For HTTP mocking in tests
]

# Integration test dependencies - adds performance monitoring and system metrics
integration = [
    "psutil>=5.8.0",  # Required for performance integration tests
]

# Performance test dependencies - system monitoring and benchmarking
performance = [
    "psutil>=5.8.0",  # System resource monitoring
    "memory-profiler>=0.60.0",  # Memory usage profiling
]

# PostgreSQL database support
postgres = [
    "asyncpg>=0.28.0",
    "psycopg2-binary>=2.9.0",
]

# Code quality and linting tools
quality = [
    "black>=23.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.5.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "pip-audit>=2.6.0",   # Dependency vulnerability scanning
    "safety>=2.3.0",      # Known security issues database
    "psutil>=5.8.0",      # For benchmarking system metrics
]

# Development utilities
dev-tools = [
    "import-linter>=2.0.0",  # For architecture validation
    "vulture>=2.14",  # For dead code detection
]

# Complete development environment - includes everything
dev = [
    # Include all other dependency groups
    "marketpipe[test,integration,performance,postgres,quality,dev-tools]",
]

[project.scripts]
mp = "marketpipe.cli:app"
marketpipe = "marketpipe.cli:app"

[project.entry-points."marketpipe.providers"]
alpaca = "marketpipe.ingestion.infrastructure.adapters:AlpacaMarketDataAdapter"
iex = "marketpipe.ingestion.infrastructure.iex_adapter:IEXMarketDataAdapter"
fake = "marketpipe.ingestion.infrastructure.fake_adapter:FakeMarketDataAdapter"

[tool.setuptools]
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.sql"]
"marketpipe" = ["py.typed"]

# Coverage configuration moved to .coveragerc to support parallel mode

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B018"]   # Allow "useless" expressions in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Import linter configuration for architecture validation
[tool.importlinter]
root_package = "marketpipe"
include_external_packages = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--maxfail=3",
    "--disable-warnings",
    "-ra"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore::RuntimeWarning"
]
markers = [
    # Speed-based markers for test organization
    "fast: Fast tests suitable for pre-commit hooks (<2s total)",
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, external dependencies)",
    "slow: Tests that take longer than 5 seconds",

    # Test reliability markers
    "flaky: Tests that are known to be flaky",
    "auth_required: Tests that require authentication credentials",

    # Domain-specific markers
    "database: Database interaction tests",
    "sqlite_only: Tests that only run on SQLite",
    "postgres: PostgreSQL-specific tests",
    "api_client: API client and connector tests",
    "config: Configuration and validation tests",
    "cli: Command-line interface tests",

    # Quality and validation markers
    "boundary: Boundary condition tests",
    "security: Security-related tests",
    "data_quality: Data quality validation tests",

    # System and infrastructure markers
    "production_simulation: Production simulation tests",
    "chaos_engineering: Chaos engineering tests",
    "distributed: Distributed systems tests",
    "deployment: Deployment and rollback tests",
    "monitoring: Monitoring and alerting tests",
    "multi_provider: Multi-provider integration tests",
    "orchestration: Orchestration and reporting tests"
]
asyncio_mode = "auto"
timeout = 60

[tool.importlinter.contracts.domain_forbidden_infrastructure]
name = "Domain layer must not import infrastructure"
type = "forbidden"
source_modules = [
    "marketpipe.domain"
]
forbidden_modules = [
    "marketpipe.infrastructure",
    "prometheus_client",
    "httpx",
    "sqlite3",
    "requests",
    "duckdb",
    "pandas",
    "pyarrow",
]

[tool.importlinter.contracts.domain_forbidden_application]
name = "Domain layer must not import application layer"
type = "forbidden"
source_modules = [
    "marketpipe.domain"
]
forbidden_modules = [
    "marketpipe.ingestion.application",
    "marketpipe.validation.application",
    "marketpipe.aggregation.application",
]
