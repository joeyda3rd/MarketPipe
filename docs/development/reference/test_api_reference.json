{
  "tests/test_rate_limiter.py": [
    {
      "type": "class",
      "name": "TestRateLimiter",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_initialization",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_initialization_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_acquire_within_capacity",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_acquire_more_than_capacity_raises_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_acquire_blocks_when_insufficient_tokens",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_acquire_async_within_capacity",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_acquire_async_more_than_capacity_raises_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_acquire_async_blocks_when_insufficient_tokens",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sync_async_behavior_consistency",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "async_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_notify_retry_after_forces_wait",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_notify_retry_after_async_forces_wait",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_token_refill_over_time",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_capacity_limit",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backward_compatibility_alias",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_recording",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_recording_async",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_access_sync",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "worker",
      "signature": "(worker_id)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_access_async",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "worker",
      "signature": "(worker_id)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_reset_functionality",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestCreateRateLimiterFromConfig",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_from_config_basic",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_from_config_with_burst_size",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_from_config_disabled",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_from_config_zero_rate_limit",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_from_config_negative_rate_limit",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestRateLimiterIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_burst_then_steady_state",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_retry_after_integration",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_mask.py": [
    {
      "type": "class",
      "name": "TestMask",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_normal_key",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_longer_key",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_custom_show_amount",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_empty_string",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_none",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_short_string",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_very_short_string",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_exactly_minimum_length",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_non_alphanumeric_characters",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_only_letters",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_only_numbers",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSafeForLog",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_single_secret",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_multiple_secrets",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_no_secrets_in_message",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_empty_secret",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_none_secret",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_multiple_occurrences",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_overlapping_secrets",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_complex_log_message",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestEdgeCases",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_zero_show",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mask_show_larger_than_string",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_safe_for_log_with_traceback_like_text",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_postgres_migrations.py": [
    {
      "type": "function",
      "name": "postgres_url",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPostgresMigrations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_migration_from_scratch",
      "signature": "(self, postgres_url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_specific_features",
      "signature": "(self, postgres_url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_concurrent_migrations",
      "signature": "(self, postgres_url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_migration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_database_url_is_postgres",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_loader.py": [
    {
      "type": "function",
      "name": "test_load_ohlcv_empty_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_ohlcv_with_sample_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_ohlcv_multiple_symbols",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_ohlcv_invalid_timeframe",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_ohlcv_empty_symbols",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_ohlcv_polars_not_available",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_ohlcv_time_filtering",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/test_provider_loader.py": [
    {
      "type": "class",
      "name": "MockProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "from_config",
      "signature": "(cls, config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockProviderNoFromConfig",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, param1, param2)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProviderLoader",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "teardown_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_provider_with_from_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_provider_without_from_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_provider_missing_provider_name",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_provider_unknown_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_provider_invalid_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "BadProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, required_param)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_available_providers",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProviderConfigValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "teardown_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_valid_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_config_not_dict",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_config_missing_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_config_provider_not_string",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_config_unknown_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestRealProviders",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "teardown_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_fake_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_alpaca_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_build_iex_provider",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_cli.py": [
    {
      "type": "function",
      "name": "test_legacy_cli_help_displays_marketpipe_commands",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/test_metrics.py": [
    {
      "type": "function",
      "name": "test_legacy_counter_increment_maintains_backward_compatibility",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_metrics_endpoint_serves_prometheus_format",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/test_prune_commands.py": [
    {
      "type": "class",
      "name": "TestAgeParser",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parse_days",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parse_months",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parse_years",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_expressions",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestParquetPruning",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_parquet_dry_run",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_parquet_actual_deletion",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_parquet_no_files",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_parquet_nonexistent_directory",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSQLitePruning",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_repo",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_sqlite_dry_run",
      "signature": "(self, mock_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_sqlite_actual_deletion",
      "signature": "(self, mock_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_sqlite_no_records",
      "signature": "(self, mock_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_sqlite_non_sqlite_backend",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_sqlite_error_handling",
      "signature": "(self, mock_repo)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestMetricsIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parquet_metrics_recorded",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_metrics_recorded",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDomainEvents",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parquet_domain_event",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_domain_event",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestCLIIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_help",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_parquet_help",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prune_sqlite_help",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_subcommand",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_base_client.py": [
    {
      "type": "class",
      "name": "DummyMarketDataAuth",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "apply",
      "signature": "(self, headers, params)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_legacy_abstract_base_client_enforces_complete_implementation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "IncompleteMarketDataClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "build_request_params",
      "signature": "(self, symbol, start_ts, end_ts, cursor)",
      "returns": null
    },
    {
      "type": "function",
      "name": "endpoint_path",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "next_cursor",
      "signature": "(self, raw_json)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_client_config_validates_required_parameters",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_base_client_supports_symbol_data_pagination",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "PagingClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, *args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "build_request_params",
      "signature": "(self, symbol, start_ts, end_ts, cursor)",
      "returns": null
    },
    {
      "type": "function",
      "name": "endpoint_path",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "next_cursor",
      "signature": "(self, raw_json)",
      "returns": null
    },
    {
      "type": "function",
      "name": "parse_response",
      "signature": "(self, raw_json)",
      "returns": null
    },
    {
      "type": "function",
      "name": "should_retry",
      "signature": "(self, status_code, json_body)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_request",
      "signature": "(self, params)",
      "returns": null
    }
  ],
  "tests/test_rate_limiter_load.py": [
    {
      "type": "class",
      "name": "TestRateLimiterLoad",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_2x_vendor_limit_5_minutes_sync",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_2x_vendor_limit_5_minutes_async",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_load_mixed_sync_async",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "sync_worker",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "async_worker",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_async_workers",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_burst_handling_under_load",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_repository_factory_fixes.py": [
    {
      "type": "class",
      "name": "TestRepositoryFactoryFixes",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_database_url_detection",
      "signature": "(self, database_url, expected_type)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSimpleJobAdapterFixes",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_repo",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "simple_adapter",
      "signature": "(self, mock_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_status_normalization_in_upsert",
      "signature": "(self, simple_adapter, input_status, expected_normalized)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_status_normalization_in_mark_done",
      "signature": "(self, simple_adapter, input_status, expected_normalized)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_status_normalization_in_list_jobs",
      "signature": "(self, simple_adapter, input_status)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_status_after_normalization",
      "signature": "(self, simple_adapter)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_comprehensive_case_insensitive_handling",
      "signature": "(self, simple_adapter, mixed_case_status)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPostgresPoolRaceCondition",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_pool_initialization",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_create_pool_func",
      "signature": "(*args, **kwargs)",
      "returns": null
    }
  ],
  "tests/test_cli_rename.py": [
    {
      "type": "class",
      "name": "TestCLIRename",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_main_app_help",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_subapp_exists",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_convenience_commands_exist",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_commands_exist",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_ingest_shows_warning",
      "signature": "(self, mock_bootstrap, mock_ingest)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_validate_shows_warning",
      "signature": "(self, mock_bootstrap, mock_validate)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_aggregate_shows_warning",
      "signature": "(self, mock_bootstrap, mock_aggregate)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_utility_commands_exist",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_ingest_works",
      "signature": "(self, mock_bootstrap, mock_ingest)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingest_ohlcv_convenience_works",
      "signature": "(self, mock_bootstrap, mock_ingest)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_validate_works",
      "signature": "(self, mock_bootstrap, mock_validate)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_aggregate_works",
      "signature": "(self, mock_bootstrap, mock_aggregate)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_signatures_preserved",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_providers_command_works",
      "signature": "(self, mock_bootstrap, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_works",
      "signature": "(self, mock_bootstrap, mock_query)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrate_command_works",
      "signature": "(self, mock_bootstrap, mock_apply_pending)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestCLIModularity",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_can_import_individual_modules",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_app_structure",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_provider_registry.py": [
    {
      "type": "class",
      "name": "MockProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": "list[Symbol]"
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": "ProviderMetadata"
    },
    {
      "type": "class",
      "name": "TestProviderRegistry",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "teardown_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_register_and_get_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_nonexistent_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_providers_empty",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_providers_multiple",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_decorator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "DecoratedProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_register_invalid_provider",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "InvalidProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_clear_registry",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_auto_register_from_entry_points",
      "signature": "(self, mock_entry_points)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_auto_register_handles_load_error",
      "signature": "(self, mock_entry_points)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_auto_register_handles_entry_points_error",
      "signature": "(self, mock_entry_points)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestBuiltinProviders",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "teardown_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_provider_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_iex_provider_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fake_provider_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_builtin_providers_implement_interface",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProviderInstantiation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_provider_from_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_iex_provider_from_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fake_provider_from_config",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_migrations.py": [
    {
      "type": "class",
      "name": "TestAlembicMigrations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_migration_from_scratch",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_migration_idempotent",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alembic_current_command",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alembic_upgrade_downgrade",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_columns_after_migration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_database_url_environment_variable",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migration_error_handling",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPostgresMigrations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "postgres_url",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_migration_from_scratch",
      "signature": "(self, postgres_url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_idempotent_migration",
      "signature": "(self, postgres_url)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestLegacyCompatibility",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_apply_pending_function",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestAlembicConfiguration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alembic_ini_exists",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alembic_migrations_exist",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alembic_env_py_exists",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/test_secrets_masking_integration.py": [
    {
      "type": "class",
      "name": "TestSecretsInLogs",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_api_key",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_api_secret",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "alpaca_client",
      "signature": "(self, test_api_key)",
      "returns": null
    },
    {
      "type": "function",
      "name": "alpaca_adapter",
      "signature": "(self, test_api_key, test_api_secret)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_client_json_parse_error_masks_key",
      "signature": "(self, alpaca_client, test_api_key, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(*args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_should_retry",
      "signature": "(status, body)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_client_retry_limit_error_masks_key",
      "signature": "(self, alpaca_client, test_api_key, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(*args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_adapter_fetch_error_masks_credentials",
      "signature": "(self, alpaca_adapter, test_api_key, test_api_secret, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_adapter_bar_translation_error_masks_credentials",
      "signature": "(self, alpaca_adapter, test_api_key, test_api_secret, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_no_hardcoded_test_keys_in_production_logs",
      "signature": "(self, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_environment_variable_masking",
      "signature": "(self, monkeypatch, caplog)",
      "returns": null
    }
  ],
  "tests/test_bootstrap_side_effect.py": [
    {
      "type": "class",
      "name": "TestBootstrapSideEffects",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_import_cli_no_db_creation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_help_command_no_db_creation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_subcommand_help_no_db_creation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestBootstrapFunctionality",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_bootstrap_function_idempotent",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_bootstrap_error_handling",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_bootstrap_environment_variable",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_reset_bootstrap_state_for_testing",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestCliCommandBootstrap",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingest_command_calls_bootstrap",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_command_calls_bootstrap",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregate_command_calls_bootstrap",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_command_calls_bootstrap",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_list_metric_names",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_calls_bootstrap",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestBootstrapConcurrency",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_bootstrap_calls",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "counting_apply_pending",
      "signature": "(path)",
      "returns": null
    }
  ],
  "tests/test_alpaca_client.py": [
    {
      "type": "function",
      "name": "test_legacy_alpaca_client_handles_symbol_data_pagination",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(url, params, headers, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_alpaca_client_supports_async_symbol_data_retrieval",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "DummyAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, *a, **kw)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc, tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params, headers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_alpaca_client_retries_after_rate_limit_response",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(url, params, headers, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_async",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "DummyAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, *args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc, tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params, headers)",
      "returns": null
    }
  ],
  "tests/regression/test_provider_feed_metrics.py": [
    {
      "type": "class",
      "name": "FakeMarketDataProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, provider_name, feed_type)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars",
      "signature": "(self, symbol, start_timestamp, end_timestamp, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_provider_info",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "FakeDataValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_bars",
      "signature": "(self, bars)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockValidationResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "FakeDataStorage",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "store_bars",
      "signature": "(self, bars, job_id)",
      "returns": null
    },
    {
      "type": "function",
      "name": "temp_metrics_db",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "temp_output_dir",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_feed_labels_in_ingestion_metrics",
      "signature": "(temp_metrics_db, temp_output_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_metrics_include_provider_feed_labels",
      "signature": "(temp_metrics_db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_metrics_include_provider_feed_labels",
      "signature": "(temp_metrics_db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_default_provider_feed_labels_when_unknown",
      "signature": "(temp_metrics_db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_database_schema_includes_provider_feed_columns",
      "signature": "(temp_metrics_db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_line_integration_with_fake_provider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "FakeProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, provider_name, feed_type)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_provider_info",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProviderFeedLabelsFixed",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prometheus_metrics_have_full_labels",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_env_var_disables_sqlite_metrics",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_record_metric_forwards_to_prometheus",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_client_uses_new_labels",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migration_backfill_applied",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_database_schema_supports_provider_feed",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_schema",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_metrics_backward_compatibility",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/integration/test_config_schema_validation.py": [
    {
      "type": "class",
      "name": "ConfigTestCase",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "ConfigValidationResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "ConfigurationValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_config_case",
      "signature": "(self, test_case)",
      "returns": "ConfigValidationResult"
    },
    {
      "type": "function",
      "name": "_validate_precedence",
      "signature": "(self, test_case, config_file, env)",
      "returns": "bool"
    },
    {
      "type": "class",
      "name": "ConfigTestGenerator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_valid_config_tests",
      "signature": "(self)",
      "returns": "list[ConfigTestCase]"
    },
    {
      "type": "function",
      "name": "generate_invalid_config_tests",
      "signature": "(self)",
      "returns": "list[ConfigTestCase]"
    },
    {
      "type": "function",
      "name": "generate_precedence_tests",
      "signature": "(self)",
      "returns": "list[ConfigTestCase]"
    },
    {
      "type": "function",
      "name": "generate_schema_validation_tests",
      "signature": "(self)",
      "returns": "list[ConfigTestCase]"
    },
    {
      "type": "class",
      "name": "TestConfigSchemaValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "config_validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "config_generator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_valid_configurations",
      "signature": "(self, config_generator, config_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_configurations",
      "signature": "(self, config_generator, config_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_precedence",
      "signature": "(self, config_generator, config_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_schema_validation",
      "signature": "(self, config_generator, config_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_file_formats",
      "signature": "(self, config_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_error_messages",
      "signature": "(self, config_generator, config_validator)",
      "returns": null
    }
  ],
  "tests/integration/test_distributed_systems_e2e.py": [
    {
      "type": "class",
      "name": "DistributedNode",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, node_id, storage_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "process_ingestion_job",
      "signature": "(self, job_data)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "simulate_failure",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "recover",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "send_heartbeat",
      "signature": "(self, coordinator)",
      "returns": "bool"
    },
    {
      "type": "class",
      "name": "DistributedCoordinator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "register_node",
      "signature": "(self, node)",
      "returns": null
    },
    {
      "type": "function",
      "name": "receive_heartbeat",
      "signature": "(self, heartbeat)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_active_nodes",
      "signature": "(self)",
      "returns": "list[str]"
    },
    {
      "type": "function",
      "name": "distribute_job",
      "signature": "(self, job_data)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "handle_node_failure",
      "signature": "(self, failed_node_id, redistribute_jobs)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDistributedSystemsEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multi_node_coordination",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordination",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_node_failure_and_recovery",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_failure_scenarios",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_distributed_state_consistency",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_consistency",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_job_processing",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_processing",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_distributed_system_integration_demo",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "comprehensive_demo",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/test_pipeline_e2e.py": [
    {
      "type": "function",
      "name": "_create_fake_bars_dataframe",
      "signature": "()",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "test_full_pipeline_end_to_end",
      "signature": "(tmp_path, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_list_metric_names",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pipeline_e2e_with_real_aggregation",
      "signature": "(tmp_path, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pipeline_error_handling",
      "signature": "(tmp_path, monkeypatch)",
      "returns": null
    }
  ],
  "tests/integration/test_deployment_rollback_e2e.py": [
    {
      "type": "class",
      "name": "DeploymentManager",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "create_deployment_environment",
      "signature": "(self, version, config)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "deploy_version",
      "signature": "(self, version, strategy)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "rollback_to_version",
      "signature": "(self, target_version, strategy)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_run_pre_deployment_checks",
      "signature": "(self, deployment)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_deploy_blue_green",
      "signature": "(self, deployment)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_deploy_rolling",
      "signature": "(self, deployment)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_deploy_canary",
      "signature": "(self, deployment)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_run_post_deployment_checks",
      "signature": "(self, deployment)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_route_traffic",
      "signature": "(self, deployment, strategy)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_validate_config",
      "signature": "(self, config)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_check_dependencies",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_check_resource_availability",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_run_database_migrations",
      "signature": "(self, deployment)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_validate_rollback_target",
      "signature": "(self, target_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_execute_immediate_rollback",
      "signature": "(self, target_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_execute_gradual_rollback",
      "signature": "(self, target_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_validate_rollback_success",
      "signature": "(self, target_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "get_deployment_status",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "VersionCompatibilityTester",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, storage_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backward_compatibility",
      "signature": "(self, old_version, new_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "test_forward_compatibility",
      "signature": "(self, current_version, future_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_config_compatibility",
      "signature": "(self, old_version, new_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_data_format_compatibility",
      "signature": "(self, old_version, new_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_api_compatibility",
      "signature": "(self, old_version, new_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_database_compatibility",
      "signature": "(self, old_version, new_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_feature_flags",
      "signature": "(self, current_version, future_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_graceful_degradation",
      "signature": "(self, current_version, future_version)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_migration_path",
      "signature": "(self, current_version, future_version)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "TestDeploymentRollbackEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_blue_green_deployment_flow",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_rolling_deployment_with_rollback",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_canary_deployment_validation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_version_compatibility_matrix",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_zero_downtime_deployment",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "measure_availability",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_comprehensive_deployment_rollback_demo",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_duckdb_views.py": [
    {
      "type": "function",
      "name": "temp_agg_data",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_agg_root",
      "signature": "(temp_agg_data, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ensure_views_creates_all_timeframes",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_basic_functionality",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_with_symbol_filter",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_aggregation",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_empty_result",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_invalid_sql",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_empty_sql",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_available_data",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_views",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_views_with_nonexistent_path",
      "signature": "(tmp_path, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_refresh_views",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_set_agg_root_functionality",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_complex_query_with_joins",
      "signature": "(mock_agg_root)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_with_time_filters",
      "signature": "(mock_agg_root)",
      "returns": null
    }
  ],
  "tests/integration/test_security_compliance_e2e.py": [
    {
      "type": "class",
      "name": "SecurityAuditLogger",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, audit_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "log_event",
      "signature": "(self, event_type, details, severity)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_events_by_type",
      "signature": "(self, event_type)",
      "returns": "list[dict]"
    },
    {
      "type": "function",
      "name": "get_events_by_severity",
      "signature": "(self, severity)",
      "returns": "list[dict]"
    },
    {
      "type": "function",
      "name": "generate_audit_report",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "DataEncryptionManager",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "encrypt_sensitive_data",
      "signature": "(self, data, context)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "decrypt_sensitive_data",
      "signature": "(self, encryption_metadata)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "rotate_encryption_key",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "AccessControlManager",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "create_user",
      "signature": "(self, username, role, department)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "authenticate_user",
      "signature": "(self, username, password)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "check_permission",
      "signature": "(self, session_id, required_permission)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_access_summary",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "ComplianceValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, audit_logger)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_data_retention",
      "signature": "(self, storage_dir)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "validate_encryption_compliance",
      "signature": "(self, encryption_metadata)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "validate_access_logging",
      "signature": "(self, access_events)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "generate_compliance_report",
      "signature": "(self, validation_results)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "TestSecurityComplianceEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_data_encryption_pipeline",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_access_control_enforcement",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_audit_trail_generation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_compliance_validation_comprehensive",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_security_compliance_integration_demo",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_data_quality_validation_e2e.py": [
    {
      "type": "class",
      "name": "DataQualityGenerator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "create_high_quality_dataset",
      "signature": "(symbol, size)",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "create_quality_issues_dataset",
      "signature": "(symbol)",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "create_mixed_quality_dataset",
      "signature": "(symbol, size)",
      "returns": "pd.DataFrame"
    },
    {
      "type": "class",
      "name": "DataQualityAnalyzer",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "analyze_ohlc_consistency",
      "signature": "(df)",
      "returns": "dict[str, any]"
    },
    {
      "type": "function",
      "name": "analyze_price_movements",
      "signature": "(df)",
      "returns": "dict[str, any]"
    },
    {
      "type": "function",
      "name": "analyze_temporal_consistency",
      "signature": "(df)",
      "returns": "dict[str, any]"
    },
    {
      "type": "function",
      "name": "analyze_volume_patterns",
      "signature": "(df)",
      "returns": "dict[str, any]"
    },
    {
      "type": "class",
      "name": "TestDataQualityValidationEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_high_quality_data_validation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_quality_issues_detection",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mixed_quality_data_processing",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_data_quality_reporting_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_quality_metrics_across_timeframes",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_data_quality_performance_impact",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_comprehensive_quality_dashboard",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_multi_provider_integration.py": [
    {
      "type": "class",
      "name": "FakeAlpacaProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": "list[Symbol]"
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": "ProviderMetadata"
    },
    {
      "type": "class",
      "name": "FakePolygonProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": "list[Symbol]"
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": "ProviderMetadata"
    },
    {
      "type": "class",
      "name": "FakeIEXProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "set_failure_mode",
      "signature": "(self, should_fail)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": "list[Symbol]"
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": "ProviderMetadata"
    },
    {
      "type": "class",
      "name": "MultiProviderOrchestrator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_with_fallback",
      "signature": "(self, symbol, time_range, preferred_provider)",
      "returns": "dict[str, list[OHLCVBar]]"
    },
    {
      "type": "function",
      "name": "analyze_provider_consistency",
      "signature": "(self, results)",
      "returns": "dict[str, any]"
    },
    {
      "type": "class",
      "name": "TestMultiProviderIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_registration_and_discovery",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_availability",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multi_provider_data_fetching",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_all",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_fallback_scenarios",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_normal",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_with_iex_failure",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multi_provider_data_storage_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_all",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_specific_configurations",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_characteristics",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cross_provider_data_validation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_all",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_performance_comparison",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "benchmark_provider",
      "signature": "(provider)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_benchmarks",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/test_symbol_pipeline_idempotence.py": [
    {
      "type": "class",
      "name": "TestSymbolPipelineIdempotence",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duplicate_ingestion_writes_zero_scd_rows",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_insert_with_scd_logic",
      "signature": "(self, conn, records, run_number)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "_insert_new_scd_row",
      "signature": "(self, conn, record, version, effective_from)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_create_modified_records",
      "signature": "(self, original_records)",
      "returns": "list[SymbolRecord]"
    },
    {
      "type": "class",
      "name": "TestSymbolPipelineIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_provider_idempotence",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_data_quality",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/integration/test_production_simulation_e2e.py": [
    {
      "type": "class",
      "name": "ProductionWorkloadSimulator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, storage_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "start_monitoring",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "stop_monitoring",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_monitor_resources",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_production_dataset",
      "signature": "(self, symbol, days, bars_per_day, volatility)",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "simulate_production_ingestion_job",
      "signature": "(self, job_id, symbols, days, simulated_delay)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "get_performance_summary",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "ResourceConstraintSimulator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "simulate_memory_pressure",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "simulate_cpu_load",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "simulate_disk_io_pressure",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProductionSimulationEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_high_volume_production_workload",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_high_volume_workload",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resource_constraint_scenarios",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_memory_pressure",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cpu_load",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_disk_pressure",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_capacity_planning_simulation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_capacity_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_production_data_integrity_at_scale",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_integrity_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_production_simulation_comprehensive_demo",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "baseline_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "peak_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "stress_test",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/test_full_pipeline.py": [
    {
      "type": "class",
      "name": "FakeMarketDataProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "test_full_pipeline_with_validation_reports",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_symbols_pipeline",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_validate_bars",
      "signature": "(symbol_name, bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pipeline_empty_validation_report",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_postgres_e2e_pipeline.py": [
    {
      "type": "function",
      "name": "postgres_available",
      "signature": "()",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "test_connection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "requires_postgres",
      "signature": "(func)",
      "returns": null
    },
    {
      "type": "class",
      "name": "PostgreSQLTestFixture",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, dsn)",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "cleanup",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_postgres_test_data",
      "signature": "(symbols, trading_day)",
      "returns": "dict[str, pd.DataFrame]"
    },
    {
      "type": "class",
      "name": "TestPostgreSQLEndToEndPipeline",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_job_repository_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_checkpoint_repository_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_metrics_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_full_pipeline_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_concurrent_job_management",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "save_job",
      "signature": "(job)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_job",
      "signature": "(job_id)",
      "returns": null
    },
    {
      "type": "function",
      "name": "start_job",
      "signature": "(job)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_performance_characteristics",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "save_job",
      "signature": "(job)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_integration_with_cli",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_monitoring_alerting_e2e.py": [
    {
      "type": "class",
      "name": "MetricsCollector",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "record_metric",
      "signature": "(self, metric_name, value, labels)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_check_alerts",
      "signature": "(self, metric_name, value, labels)",
      "returns": null
    },
    {
      "type": "function",
      "name": "add_alert_rule",
      "signature": "(self, rule_name, metric, condition, threshold, severity)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_metric_summary",
      "signature": "(self, metric_name, time_window_seconds)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "get_alert_summary",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "SystemHealthMonitor",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, metrics_collector)",
      "returns": null
    },
    {
      "type": "function",
      "name": "add_health_check",
      "signature": "(self, check_name, check_func, critical)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_health_checks",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "calculate_health_score",
      "signature": "(self)",
      "returns": "float"
    },
    {
      "type": "class",
      "name": "AlertManager",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "add_notification_channel",
      "signature": "(self, channel_name, channel_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "add_escalation_rule",
      "signature": "(self, rule_name, conditions, actions)",
      "returns": null
    },
    {
      "type": "function",
      "name": "process_alert",
      "signature": "(self, alert)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_send_notification",
      "signature": "(self, channel, alert)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "TestMonitoringAlertingEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_collection_pipeline",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alert_triggering_and_notification",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "simulate_alert_scenarios",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_system_health_monitoring",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "storage_health_check",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "memory_health_check",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "api_connectivity_check",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "database_health_check",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_health_monitoring",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dashboard_metrics_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_comprehensive_monitoring_integration_demo",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "quick_storage_check",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "quick_memory_check",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_comprehensive_monitoring_demo",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/test_cli_option_validation.py": [
    {
      "type": "class",
      "name": "OptionTestCase",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "OptionValidationResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "CLIOptionValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_option_combination",
      "signature": "(self, test_case)",
      "returns": "OptionValidationResult"
    },
    {
      "type": "function",
      "name": "_filter_operational_logs",
      "signature": "(self, stderr)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "_has_actual_errors",
      "signature": "(self, stderr)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_setup_test_environment",
      "signature": "(self, test_case, temp_path)",
      "returns": "dict[str, str]"
    },
    {
      "type": "function",
      "name": "_generate_test_config",
      "signature": "(self, test_case)",
      "returns": "dict[str, Any]"
    },
    {
      "type": "function",
      "name": "_build_command_args",
      "signature": "(self, test_case)",
      "returns": "list[str]"
    },
    {
      "type": "class",
      "name": "CLIOptionTestGenerator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_provider_tests",
      "signature": "(self)",
      "returns": "list[OptionTestCase]"
    },
    {
      "type": "function",
      "name": "generate_date_validation_tests",
      "signature": "(self)",
      "returns": "list[OptionTestCase]"
    },
    {
      "type": "function",
      "name": "generate_symbol_format_tests",
      "signature": "(self)",
      "returns": "list[OptionTestCase]"
    },
    {
      "type": "function",
      "name": "generate_numeric_parameter_tests",
      "signature": "(self)",
      "returns": "list[OptionTestCase]"
    },
    {
      "type": "function",
      "name": "generate_path_validation_tests",
      "signature": "(self)",
      "returns": "list[OptionTestCase]"
    },
    {
      "type": "function",
      "name": "generate_configuration_precedence_tests",
      "signature": "(self)",
      "returns": "list[OptionTestCase]"
    },
    {
      "type": "class",
      "name": "TestCLIOptionValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "option_generator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "option_validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_configurations",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_date_range_validation",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_symbol_format_validation",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_numeric_parameter_validation",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_path_validation",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_precedence",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_option_combination_matrix",
      "signature": "(self, option_generator, option_validator)",
      "returns": null
    }
  ],
  "tests/integration/test_cli_command_matrix.py": [
    {
      "type": "class",
      "name": "CommandInfo",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "ValidationResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "CLICommandDiscovery",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "discover_all_commands",
      "signature": "(self)",
      "returns": "list[CommandInfo]"
    },
    {
      "type": "function",
      "name": "_discover_main_commands",
      "signature": "(self)",
      "returns": "list[CommandInfo]"
    },
    {
      "type": "function",
      "name": "_discover_subapp_commands",
      "signature": "(self)",
      "returns": "list[CommandInfo]"
    },
    {
      "type": "function",
      "name": "_get_deprecated_commands",
      "signature": "(self)",
      "returns": "list[CommandInfo]"
    },
    {
      "type": "class",
      "name": "CLICommandValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, use_subprocess)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_command",
      "signature": "(self, command)",
      "returns": "ValidationResult"
    },
    {
      "type": "function",
      "name": "_test_help_command",
      "signature": "(self, command)",
      "returns": "tuple[bool, str, float]"
    },
    {
      "type": "function",
      "name": "_test_no_side_effects",
      "signature": "(self, command)",
      "returns": "tuple[bool, list[Path]]"
    },
    {
      "type": "class",
      "name": "CLIMatrixTestReporter",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "add_results",
      "signature": "(self, results)",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_coverage_report",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "get_failed_commands",
      "signature": "(self)",
      "returns": "list[ValidationResult]"
    },
    {
      "type": "class",
      "name": "TestCLICommandMatrix",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "discovery",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "reporter",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_discover_all_commands",
      "signature": "(self, discovery)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_help_commands_work",
      "signature": "(self, discovery, validator, reporter)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_help_output_consistency",
      "signature": "(self, discovery, validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_commands_show_warnings",
      "signature": "(self, discovery, validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_execution_performance",
      "signature": "(self, discovery, validator)",
      "returns": null
    }
  ],
  "tests/integration/test_orchestration_reporting.py": [
    {
      "type": "class",
      "name": "E2ETestResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__post_init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "E2ETestSuiteResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "success_rate",
      "signature": "(self)",
      "returns": "float"
    },
    {
      "type": "function",
      "name": "failure_rate",
      "signature": "(self)",
      "returns": "float"
    },
    {
      "type": "class",
      "name": "E2ETestOrchestrator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, output_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_test_suite",
      "signature": "(self, suite_name, test_functions, setup_func, teardown_func)",
      "returns": "E2ETestSuiteResult"
    },
    {
      "type": "function",
      "name": "_run_single_test",
      "signature": "(self, test_func)",
      "returns": "E2ETestResult"
    },
    {
      "type": "function",
      "name": "_collect_system_info",
      "signature": "(self)",
      "returns": "dict[str, Any]"
    },
    {
      "type": "function",
      "name": "generate_reports",
      "signature": "(self)",
      "returns": "dict[str, Path]"
    },
    {
      "type": "function",
      "name": "_generate_json_report",
      "signature": "(self)",
      "returns": "dict[str, Any]"
    },
    {
      "type": "function",
      "name": "_generate_html_report",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "_generate_summary_report",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "create_comprehensive_e2e_suite",
      "signature": "(tmp_path)",
      "returns": "list[Callable]"
    },
    {
      "type": "function",
      "name": "test_real_aggregation_pipeline",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_error_propagation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_performance_benchmarks",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_conditions",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multi_provider_integration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_data_quality_validation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_postgres_integration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestE2EOrchestration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_orchestrator_basic_functionality",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_simple_pass",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_simple_fail",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_simple_skip",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_comprehensive_e2e_suite_execution",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_comprehensive_tests",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "teardown_comprehensive_tests",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_performance_reporting_integration",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fast_operation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_medium_operation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_slow_operation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_full_e2e_orchestration_demo",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_metrics_events.py": [
    {
      "type": "function",
      "name": "temp_metrics_db",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "clear_event_bus",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingestion_completed_event_records_metrics",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_failed_event_records_metrics",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_completed_event_records_metrics",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_completed_event_records_metrics",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_failed_event_records_metrics",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_events_record_separate_metrics",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_event_handlers_gracefully_handle_errors",
      "signature": "(temp_metrics_db, clear_event_bus)",
      "returns": null
    }
  ],
  "tests/integration/test_performance_integration.py": [
    {
      "type": "class",
      "name": "PerformanceMonitor",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "start",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "stop",
      "signature": "(self)",
      "returns": "dict[str, float]"
    },
    {
      "type": "function",
      "name": "_monitor_loop",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_trading_calendar",
      "signature": "(start_date, end_date)",
      "returns": "list[date]"
    },
    {
      "type": "function",
      "name": "generate_realistic_trading_data",
      "signature": "(symbols, trading_days, bars_per_day)",
      "returns": "dict[str, pd.DataFrame]"
    },
    {
      "type": "class",
      "name": "TestPerformanceIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_single_symbol_full_year_performance",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multi_symbol_single_day_performance",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "write_symbol_data",
      "signature": "(symbol)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "test_concurrent_read_write_performance",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "concurrent_reader",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "concurrent_writer",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_memory_leak_detection",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_large_file_handling_performance",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_performance_baseline_establishment",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_cli_enhanced_matrix.py": [
    {
      "type": "class",
      "name": "EdgeCaseTest",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "EdgeCaseResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "EnhancedCLITester",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "create_edge_case_tests",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_date_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_symbol_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_config_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_provider_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_numeric_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_filesystem_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "_create_factory_reset_edge_cases",
      "signature": "(self)",
      "returns": "list[EdgeCaseTest]"
    },
    {
      "type": "function",
      "name": "execute_test",
      "signature": "(self, test)",
      "returns": "EdgeCaseResult"
    },
    {
      "type": "function",
      "name": "_validate_test_result",
      "signature": "(self, test, result)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "run_all_edge_case_tests",
      "signature": "(self)",
      "returns": "list[EdgeCaseResult]"
    },
    {
      "type": "function",
      "name": "generate_edge_case_report",
      "signature": "(self, results)",
      "returns": "str"
    },
    {
      "type": "class",
      "name": "TestEnhancedCLIMatrix",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "tester",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_edge_cases",
      "signature": "(self, tester)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_performance_benchmarks",
      "signature": "(self, tester)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_option_combinations",
      "signature": "(self, tester)",
      "returns": null
    }
  ],
  "tests/integration/test_pipeline_smoke_validation.py": [
    {
      "type": "class",
      "name": "PipelineTestScenario",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "PipelineTestResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "PipelineSmokeValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_pipeline_scenario",
      "signature": "(self, scenario)",
      "returns": "PipelineTestResult"
    },
    {
      "type": "function",
      "name": "_create_test_config",
      "signature": "(self, scenario, temp_path)",
      "returns": "Path"
    },
    {
      "type": "function",
      "name": "_run_ingest_step",
      "signature": "(self, scenario, config_path, data_dir)",
      "returns": "tuple[bool, list[str]]"
    },
    {
      "type": "function",
      "name": "_run_validate_step",
      "signature": "(self, scenario, config_path)",
      "returns": "tuple[bool, list[str]]"
    },
    {
      "type": "function",
      "name": "_run_aggregate_step",
      "signature": "(self, scenario, config_path)",
      "returns": "tuple[bool, list[str]]"
    },
    {
      "type": "function",
      "name": "_discover_created_files",
      "signature": "(self, data_dir)",
      "returns": "list[Path]"
    },
    {
      "type": "function",
      "name": "_count_total_records",
      "signature": "(self, data_dir)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "_calculate_performance_metrics",
      "signature": "(self, data_dir, start_time)",
      "returns": "dict[str, float]"
    },
    {
      "type": "class",
      "name": "PipelineTestScenarioGenerator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_basic_smoke_tests",
      "signature": "(self)",
      "returns": "list[PipelineTestScenario]"
    },
    {
      "type": "function",
      "name": "generate_provider_specific_tests",
      "signature": "(self)",
      "returns": "list[PipelineTestScenario]"
    },
    {
      "type": "function",
      "name": "generate_error_handling_tests",
      "signature": "(self)",
      "returns": "list[PipelineTestScenario]"
    },
    {
      "type": "function",
      "name": "generate_performance_baseline_tests",
      "signature": "(self)",
      "returns": "list[PipelineTestScenario]"
    },
    {
      "type": "class",
      "name": "TestPipelineSmokeValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "scenario_generator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "pipeline_validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_basic_smoke_tests",
      "signature": "(self, scenario_generator, pipeline_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_integration",
      "signature": "(self, scenario_generator, pipeline_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_error_handling",
      "signature": "(self, scenario_generator, pipeline_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_performance_baseline",
      "signature": "(self, scenario_generator, pipeline_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_data_quality_validation",
      "signature": "(self, scenario_generator, pipeline_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_full_pipeline_workflow",
      "signature": "(self, scenario_generator, pipeline_validator)",
      "returns": null
    }
  ],
  "tests/integration/test_error_propagation_e2e.py": [
    {
      "type": "class",
      "name": "ErrorInjector",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "storage_error",
      "signature": "(error_type, message)",
      "returns": null
    },
    {
      "type": "function",
      "name": "duckdb_error",
      "signature": "(error_type, message)",
      "returns": null
    },
    {
      "type": "function",
      "name": "network_error",
      "signature": "(error_type, message)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validation_error",
      "signature": "(error_type, message)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestErrorPropagationEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_storage_errors_propagate_with_context",
      "signature": "(self, tmp_path, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_errors_propagate_with_context",
      "signature": "(self, tmp_path, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_secret_masking_in_error_propagation",
      "signature": "(self, tmp_path, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_errors_with_helpful_context",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cascading_failure_scenarios",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_error_context_preservation",
      "signature": "(self, tmp_path, caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resource_cleanup_on_errors",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_user_actionable_error_messages",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_error_logging_levels_and_targets",
      "signature": "(tmp_path, caplog)",
      "returns": null
    }
  ],
  "tests/integration/test_ingestion_coordinator_service_flow.py": [
    {
      "type": "function",
      "name": "create_test_configuration",
      "signature": "(output_path)",
      "returns": "IngestionConfiguration"
    },
    {
      "type": "function",
      "name": "create_test_batch_configuration",
      "signature": "()",
      "returns": "BatchConfiguration"
    },
    {
      "type": "function",
      "name": "create_recent_time_range",
      "signature": "()",
      "returns": "TimeRange"
    },
    {
      "type": "function",
      "name": "ingestion_services",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestionCoordinatorEndToEndFlow",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordinator_handles_successful_symbol_ingestion",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordinator_handles_multiple_symbols_correctly",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordinator_handles_failed_symbols_gracefully",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordinator_uses_checkpoints_for_resumable_operations",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordinator_creates_proper_partition_paths",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_coordinator_emits_comprehensive_domain_events",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_process_symbol_writes_parquet_partition",
      "signature": "(self, ingestion_services, tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_boundary_conditions_e2e.py": [
    {
      "type": "class",
      "name": "BoundaryTestDataGenerator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "create_minimal_dataset",
      "signature": "()",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "create_extreme_price_dataset",
      "signature": "()",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "create_temporal_boundary_dataset",
      "signature": "()",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "create_large_volume_dataset",
      "signature": "(size)",
      "returns": "pd.DataFrame"
    },
    {
      "type": "function",
      "name": "create_malformed_data_variants",
      "signature": "()",
      "returns": "list[tuple[pd.DataFrame, str]]"
    },
    {
      "type": "class",
      "name": "TestBoundaryConditionsEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_minimal_dataset_processing",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_extreme_price_conditions",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_temporal_boundary_conditions",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_large_dataset_stress",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_malformed_data_resilience",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resource_exhaustion_scenarios",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_boundary_conditions",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "write_boundary_data",
      "signature": "(thread_id)",
      "returns": "tuple[int, str]"
    },
    {
      "type": "function",
      "name": "test_system_limits_documentation",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_config_execution_flow.py": [
    {
      "type": "class",
      "name": "TestConfigurationExecutionFlow",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_yaml_config_to_complete_execution",
      "signature": "(self, tmp_path, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_config_validation_and_error_handling",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_environment_variable_integration",
      "signature": "(self, tmp_path, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_help_and_documentation",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_config_file_formats_and_extensions",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_persistence_and_defaults",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_config_integration_with_storage_engine",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_real_aggregation_e2e.py": [
    {
      "type": "function",
      "name": "generate_realistic_minute_bars",
      "signature": "(symbol, trading_day, count, base_price)",
      "returns": "pd.DataFrame"
    },
    {
      "type": "class",
      "name": "TestRealAggregationEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_complete_aggregation_pipeline_without_mocking",
      "signature": "(self, tmp_path, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_error_handling_and_recovery",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_job_aggregation",
      "signature": "(self, tmp_path)",
      "returns": null
    }
  ],
  "tests/integration/test_chaos_resilience_e2e.py": [
    {
      "type": "class",
      "name": "ChaosAgent",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "inject_network_failure",
      "signature": "(self, duration_seconds, failure_rate)",
      "returns": null
    },
    {
      "type": "function",
      "name": "network_failure_thread",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "inject_memory_pressure",
      "signature": "(self, duration_seconds, pressure_level)",
      "returns": null
    },
    {
      "type": "function",
      "name": "memory_pressure_thread",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "inject_cpu_spike",
      "signature": "(self, duration_seconds, intensity)",
      "returns": null
    },
    {
      "type": "function",
      "name": "cpu_spike_worker",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "cpu_spike_coordinator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "inject_storage_failure",
      "signature": "(self, duration_seconds, failure_type)",
      "returns": null
    },
    {
      "type": "function",
      "name": "storage_failure_timer",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "get_chaos_summary",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "ResilienceMetrics",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "record_availability",
      "signature": "(self, is_available, timestamp)",
      "returns": null
    },
    {
      "type": "function",
      "name": "record_recovery_time",
      "signature": "(self, failure_start, recovery_end, failure_type)",
      "returns": null
    },
    {
      "type": "function",
      "name": "record_error_rate",
      "signature": "(self, error_count, total_operations, timestamp)",
      "returns": null
    },
    {
      "type": "function",
      "name": "record_throughput_degradation",
      "signature": "(self, baseline_throughput, actual_throughput, timestamp)",
      "returns": null
    },
    {
      "type": "function",
      "name": "calculate_resilience_score",
      "signature": "(self)",
      "returns": "float"
    },
    {
      "type": "function",
      "name": "get_metrics_summary",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "FaultToleranceValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, storage_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_graceful_degradation",
      "signature": "(self, chaos_agent)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "test_failure_isolation",
      "signature": "(self, chaos_agent)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_measure_baseline_performance",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_measure_performance_under_chaos",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_memory_operations",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_cpu_operations",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "_test_storage_operations",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "TestChaosResilienceEndToEnd",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_network_failure_resilience",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "baseline_operations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "operations_during_failure",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resource_exhaustion_handling",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "resource_exhaustion_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cascading_failure_prevention",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "cascading_failure_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_graceful_degradation_patterns",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "graceful_degradation_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_comprehensive_chaos_engineering_demo",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "establish_baseline",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "monitor_chaos_impact",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "assess_recovery",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_isolation",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/test_provider_specific_validation.py": [
    {
      "type": "class",
      "name": "ProviderTestConfig",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "ProviderTestResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "ProviderValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_get_provider_configs",
      "signature": "(self)",
      "returns": "dict[str, ProviderTestConfig]"
    },
    {
      "type": "function",
      "name": "validate_provider",
      "signature": "(self, provider_name, test_auth)",
      "returns": "ProviderTestResult"
    },
    {
      "type": "function",
      "name": "_test_provider_connection",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_test_provider_authentication",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_test_data_format",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_test_rate_limiting",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_test_error_handling",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_test_batch_sizes",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_test_feed_types",
      "signature": "(self, config)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "_measure_provider_performance",
      "signature": "(self, config)",
      "returns": "dict[str, float]"
    },
    {
      "type": "class",
      "name": "TestProviderSpecificValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "provider_validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fake_provider_comprehensive",
      "signature": "(self, provider_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_providers_connection",
      "signature": "(self, provider_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_help_consistency",
      "signature": "(self, provider_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_feed_type_support",
      "signature": "(self, provider_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_authenticated_providers",
      "signature": "(self, provider_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_error_messages",
      "signature": "(self, provider_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_performance_comparison",
      "signature": "(self, provider_validator)",
      "returns": null
    }
  ],
  "tests/integration/test_cli_backward_compatibility.py": [
    {
      "type": "class",
      "name": "DeprecationTestCase",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "CompatibilityTestResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "BackwardCompatibilityValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_deprecated_command",
      "signature": "(self, test_case)",
      "returns": "CompatibilityTestResult"
    },
    {
      "type": "function",
      "name": "compare_command_outputs",
      "signature": "(self, deprecated_cmd, new_cmd, options)",
      "returns": "tuple[bool, list[str]]"
    },
    {
      "type": "function",
      "name": "_clean_output_for_comparison",
      "signature": "(self, output)",
      "returns": "str"
    },
    {
      "type": "class",
      "name": "DeprecationTestGenerator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "generate_deprecated_command_tests",
      "signature": "(self)",
      "returns": "list[DeprecationTestCase]"
    },
    {
      "type": "function",
      "name": "generate_alias_consistency_tests",
      "signature": "(self)",
      "returns": "list[DeprecationTestCase]"
    },
    {
      "type": "class",
      "name": "ConfigurationCompatibilityValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, base_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_config_schema_compatibility",
      "signature": "(self)",
      "returns": "list[str]"
    },
    {
      "type": "function",
      "name": "_generate_v1_config",
      "signature": "(self)",
      "returns": "tuple[str, dict[str, Any]]"
    },
    {
      "type": "function",
      "name": "_generate_minimal_config",
      "signature": "(self)",
      "returns": "tuple[str, dict[str, Any]]"
    },
    {
      "type": "function",
      "name": "_generate_mixed_format_config",
      "signature": "(self)",
      "returns": "tuple[str, dict[str, Any]]"
    },
    {
      "type": "function",
      "name": "_test_config_compatibility",
      "signature": "(self, config_name, config_data)",
      "returns": "list[str]"
    },
    {
      "type": "class",
      "name": "TestCLIBackwardCompatibility",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "compatibility_validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "deprecation_generator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "config_validator",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_commands_show_warnings",
      "signature": "(self, deprecation_generator, compatibility_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_commands_still_work",
      "signature": "(self, deprecation_generator, compatibility_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_alias_consistency",
      "signature": "(self, deprecation_generator, compatibility_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_backward_compatibility",
      "signature": "(self, config_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_error_message_consistency",
      "signature": "(self, compatibility_validator)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migration_guidance",
      "signature": "(self, deprecation_generator, compatibility_validator)",
      "returns": null
    }
  ],
  "tests/integration/postgres/quick_postgres_test.py": [
    {
      "type": "function",
      "name": "check_postgres_connection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_migration_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "main",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/postgres/run_pytest_postgres.py": [
    {
      "type": "function",
      "name": "main",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/postgres/fixed_postgres_test.py": [
    {
      "type": "function",
      "name": "run_tests",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_connection_and_features",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_all_tests",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/integration/postgres/run_complete_postgres_tests.py": [
    {
      "type": "function",
      "name": "print_banner",
      "signature": "(title)",
      "returns": null
    },
    {
      "type": "function",
      "name": "print_step",
      "signature": "(step)",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_command",
      "signature": "(cmd, description, capture_output, check)",
      "returns": null
    },
    {
      "type": "function",
      "name": "check_docker",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_postgres_container",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "install_dependencies",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_basic_connection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alembic_migrations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_pytest_tests",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "show_summary",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "main",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/config/test_versioning.py": [
    {
      "type": "function",
      "name": "_create_yaml_file",
      "signature": "(data, path)",
      "returns": "Path"
    },
    {
      "type": "function",
      "name": "base_config",
      "signature": "()",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "test_valid_version",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_missing_version_raises_error",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_too_old_version_raises_error",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_future_version_warns_but_continues",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_unknown_keys_rejected",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_kebab_case_normalization",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_environment_variable_expansion",
      "signature": "(tmp_path, base_config, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_yaml_raises_error",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_nonexistent_file_raises_error",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_non_dict_yaml_raises_error",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backward_compatibility_with_from_yaml",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backward_compatibility_missing_version_from_yaml",
      "signature": "(tmp_path, base_config)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_version_constants_are_consistent",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_config_model_has_correct_defaults",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pydantic_forbids_extra_fields",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/fakes/events.py": [
    {
      "type": "class",
      "name": "FakeEventPublisher",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "publish",
      "signature": "(self, event)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "publish_many",
      "signature": "(self, events)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "register_handler",
      "signature": "(self, event_type, handler)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "get_published_events",
      "signature": "(self)",
      "returns": "list[DomainEvent]"
    },
    {
      "type": "function",
      "name": "get_events_of_type",
      "signature": "(self, event_type)",
      "returns": "list[DomainEvent]"
    },
    {
      "type": "function",
      "name": "get_events_by_type_name",
      "signature": "(self, event_type_name)",
      "returns": "list[DomainEvent]"
    },
    {
      "type": "function",
      "name": "has_event_of_type",
      "signature": "(self, event_type)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_event_count",
      "signature": "(self)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "get_event_count_by_type",
      "signature": "(self, event_type)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "clear_events",
      "signature": "(self)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "assert_event_published",
      "signature": "(self, event_type)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "assert_event_count",
      "signature": "(self, expected_count)",
      "returns": "None"
    }
  ],
  "tests/fakes/adapters.py": [
    {
      "type": "class",
      "name": "FakeMarketDataAdapter",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, provider_name)",
      "returns": null
    },
    {
      "type": "function",
      "name": "set_bars_data",
      "signature": "(self, symbol, bars)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "set_failure_mode",
      "signature": "(self, should_fail, message)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "set_symbol_failure",
      "signature": "(self, symbol, should_fail)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "set_connection_status",
      "signature": "(self, is_working)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "set_supported_symbols",
      "signature": "(self, symbols)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "fetch_bars_for_symbol",
      "signature": "(self, symbol, time_range, max_bars)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "get_supported_symbols",
      "signature": "(self)",
      "returns": "list[Symbol]"
    },
    {
      "type": "function",
      "name": "is_available",
      "signature": "(self)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_provider_metadata",
      "signature": "(self)",
      "returns": "ProviderMetadata"
    },
    {
      "type": "function",
      "name": "get_provider_info",
      "signature": "(self)",
      "returns": "dict[str, Any]"
    },
    {
      "type": "function",
      "name": "fetch_bars",
      "signature": "(self, symbol, start_timestamp, end_timestamp, batch_size)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "test_connection",
      "signature": "(self)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_fetch_calls",
      "signature": "(self)",
      "returns": "list[tuple[Symbol, TimeRange]]"
    },
    {
      "type": "function",
      "name": "clear_fetch_calls",
      "signature": "(self)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "get_configured_symbols",
      "signature": "(self)",
      "returns": "list[Symbol]"
    },
    {
      "type": "function",
      "name": "create_test_ohlcv_bars",
      "signature": "(symbol, count, start_time)",
      "returns": "list[OHLCVBar]"
    },
    {
      "type": "function",
      "name": "create_test_ohlcv_bar_dict",
      "signature": "(symbol, timestamp, open_price, high_price, low_price, close_price, volume)",
      "returns": "dict[str, Any]"
    }
  ],
  "tests/fakes/repositories.py": [
    {
      "type": "class",
      "name": "FakeIngestionJobRepository",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "save",
      "signature": "(self, job)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "get_by_id",
      "signature": "(self, job_id)",
      "returns": "IngestionJob | None"
    },
    {
      "type": "function",
      "name": "get_by_state",
      "signature": "(self, state)",
      "returns": "list[IngestionJob]"
    },
    {
      "type": "function",
      "name": "get_active_jobs",
      "signature": "(self)",
      "returns": "list[IngestionJob]"
    },
    {
      "type": "function",
      "name": "get_jobs_by_date_range",
      "signature": "(self, start_date, end_date)",
      "returns": "list[IngestionJob]"
    },
    {
      "type": "function",
      "name": "delete",
      "signature": "(self, job_id)",
      "returns": "bool"
    },
    {
      "type": "function",
      "name": "get_job_history",
      "signature": "(self, limit)",
      "returns": "list[IngestionJob]"
    },
    {
      "type": "function",
      "name": "count_jobs_by_state",
      "signature": "(self)",
      "returns": "dict[ProcessingState, int]"
    },
    {
      "type": "function",
      "name": "get_saved_jobs",
      "signature": "(self)",
      "returns": "list[IngestionJob]"
    },
    {
      "type": "function",
      "name": "get_save_calls",
      "signature": "(self)",
      "returns": "list[IngestionJobId]"
    },
    {
      "type": "function",
      "name": "clear",
      "signature": "(self)",
      "returns": "None"
    },
    {
      "type": "class",
      "name": "FakeIngestionCheckpointRepository",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "save_checkpoint",
      "signature": "(self, job_id, checkpoint)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "get_checkpoint",
      "signature": "(self, job_id, symbol)",
      "returns": "IngestionCheckpoint | None"
    },
    {
      "type": "function",
      "name": "get_all_checkpoints",
      "signature": "(self, job_id)",
      "returns": "list[IngestionCheckpoint]"
    },
    {
      "type": "function",
      "name": "delete_checkpoints",
      "signature": "(self, job_id)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "get_global_checkpoint",
      "signature": "(self, symbol)",
      "returns": "IngestionCheckpoint | None"
    },
    {
      "type": "function",
      "name": "cleanup_old_checkpoints",
      "signature": "(self, older_than)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "get_saved_checkpoints",
      "signature": "(self)",
      "returns": "list[IngestionCheckpoint]"
    },
    {
      "type": "function",
      "name": "get_save_calls",
      "signature": "(self)",
      "returns": "list[tuple[IngestionJobId, IngestionCheckpoint]]"
    },
    {
      "type": "function",
      "name": "clear",
      "signature": "(self)",
      "returns": "None"
    },
    {
      "type": "class",
      "name": "FakeIngestionMetricsRepository",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "save_metrics",
      "signature": "(self, job_id, metrics)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "get_metrics",
      "signature": "(self, job_id)",
      "returns": "ProcessingMetrics | None"
    },
    {
      "type": "function",
      "name": "get_metrics_history",
      "signature": "(self, start_date, end_date)",
      "returns": "list[tuple[IngestionJobId, ProcessingMetrics]]"
    },
    {
      "type": "function",
      "name": "get_average_metrics",
      "signature": "(self, start_date, end_date)",
      "returns": "ProcessingMetrics | None"
    },
    {
      "type": "function",
      "name": "get_performance_trends",
      "signature": "(self, days)",
      "returns": "list[tuple[datetime, float]]"
    },
    {
      "type": "function",
      "name": "get_saved_metrics",
      "signature": "(self)",
      "returns": "dict[IngestionJobId, ProcessingMetrics]"
    },
    {
      "type": "function",
      "name": "get_save_calls",
      "signature": "(self)",
      "returns": "list[tuple[IngestionJobId, ProcessingMetrics]]"
    },
    {
      "type": "function",
      "name": "clear",
      "signature": "(self)",
      "returns": "None"
    }
  ],
  "tests/fakes/validators.py": [
    {
      "type": "class",
      "name": "ValidationResult",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "FakeDataValidator",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "validate_bars",
      "signature": "(self, bars)",
      "returns": "ValidationResult"
    }
  ],
  "tests/metrics/test_symbols_metrics.py": [
    {
      "type": "class",
      "name": "TestSymbolsMetrics",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_are_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_snapshot_records_counter",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_symbols_rows_counter_with_labels",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_null_ratio_gauge_with_columns",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pipeline_records_snapshot_metric",
      "signature": "(self, mock_update_metrics, mock_refresh, mock_scd_update, mock_diff, mock_normalize, mock_fetch, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_update_null_ratio_metrics_with_mock_db",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_update_null_ratio_metrics_handles_empty_table",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_update_null_ratio_metrics_handles_missing_view",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/metrics/test_async_server.py": [
    {
      "type": "function",
      "name": "find_free_port",
      "signature": "()",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "cleanup_global_server",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_metrics_server_lifecycle",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_serves_prometheus_metrics",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_returns_404_for_invalid_paths",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_returns_405_for_invalid_methods",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_event_loop_lag_monitoring",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_global_server_instance_management",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_handles_concurrent_requests",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "make_request",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_context_manager",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_multiprocess_mode",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_handles_metrics_port_env_var",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_graceful_shutdown_during_request",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "slow_request",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_error_handling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_ensures_no_leaked_tasks",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "run_test",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_improved_http_parsing",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_connection_limits",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_proper_logging",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_secure_error_handling",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/ingestion/test_validation_logging.py": [
    {
      "type": "function",
      "name": "test_validation_warning_logged",
      "signature": "(caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_raw",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_warning_with_valid_ticker",
      "signature": "(caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_raw",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_successful_validation_no_log",
      "signature": "(caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_mixed_valid_invalid_records",
      "signature": "(caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_raw",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/ingestion/symbol_providers/test_nasdaq_dl.py": [
    {
      "type": "class",
      "name": "TestNasdaqDailyListProviderRegistration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_nasdaq_dl_provider_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_nasdaq_dl_provider_returns_correct_instance",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_nasdaq_dl_provider_configuration",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestNasdaqDailyListProviderParsing",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_symbols_happy_path",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_test_issue_skipped",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_custom_as_of_overrides_footer",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_blank_market_category_defaults_to_xnas",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_footer_with_extra_spaces",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_ticker_filtered_out",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_etf_exclusion_configuration",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestNasdaqDailyListProviderErrorHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_http_error_raises",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "raise_for_status",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_file_returns_empty_list",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_malformed_rows_are_skipped",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_footer_parsing_fallback",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestNasdaqDailyListProviderConfiguration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_name_attribute",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_default_configuration",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_as_of_date_handling",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_preservation",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/ingestion/symbol_providers/test_polygon.py": [
    {
      "type": "class",
      "name": "TestPolygonProviderRegistration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_polygon_provider_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_polygon_provider_returns_correct_instance",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_polygon_provider_requires_token_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPolygonProviderSinglePage",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_single_page_happy_path",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_response_returns_empty_list",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPolygonProviderPagination",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pagination_two_pages",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pagination_stops_when_no_next_url",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPolygonProviderMapping",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_status_and_asset_class_mapping",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_exchange_mic_mapping",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_optional_fields_handling",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPolygonProviderErrorHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_http_error_raises",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "function",
      "name": "raise_for_status",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_missing_token_raises_key_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_json_response",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "function",
      "name": "bad_json",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_timeout_configuration",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc_val, exc_tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestPolygonProviderConfiguration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_name_attribute",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_as_of_date_default",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_as_of_date_custom",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_preserved",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/ingestion/symbol_providers/test_base.py": [
    {
      "type": "class",
      "name": "TestProviderRegistry",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_registry_lists_dummy",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_provider_returns_instance",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_provider_with_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_unknown_provider_raises",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duplicate_registration_raises",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "_fetch_raw",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_map_to_records",
      "signature": "(self, payload)",
      "returns": null
    },
    {
      "type": "class",
      "name": "FirstProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "_fetch_raw",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_map_to_records",
      "signature": "(self, payload)",
      "returns": null
    },
    {
      "type": "class",
      "name": "SecondProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "_fetch_raw",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_map_to_records",
      "signature": "(self, payload)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_register_non_provider_raises",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "NotAProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_register_injects_name",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "NamedProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "_fetch_raw",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "_map_to_records",
      "signature": "(self, payload)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSymbolProviderBase",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_symbols_returns_symbolrecord",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sync_wrapper",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_with_default_date",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_with_custom_date",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_with_provider_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_abstract_methods_enforcement",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "IncompleteProvider1",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "_map_to_records",
      "signature": "(self, payload)",
      "returns": null
    },
    {
      "type": "class",
      "name": "IncompleteProvider2",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "_fetch_raw",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_symbols_workflow",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDummyProvider",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_fetch_raw_returns_static_data",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_map_to_records",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_as_of_date_in_response",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_provider_name",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_full_workflow",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/ingestion/symbol_providers/test_dummy_adapter.py": [
    {
      "type": "class",
      "name": "TestDummyProviderRegistration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_provider_registered",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_dummy_provider_returns_correct_instance",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dummy_provider_with_configuration",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDummyProviderAsync",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_fetch_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_fetch_raw",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_map_to_records",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDummyProviderSync",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sync_fetch_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDummyProviderConfiguration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_name_attribute",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_as_of_date_default",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_as_of_date_custom",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_configuration_preserved",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDummyProviderErrorHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_map_to_records_with_empty_payload",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_map_to_records_with_invalid_data",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_map_to_records_with_partial_valid_data",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDummyProviderIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_end_to_end_async_workflow",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_end_to_end_sync_workflow",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_consistency_across_calls",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/ingestion/normalizer/test_scd_writer.py": [
    {
      "type": "function",
      "name": "_drop_symbols_master_safe",
      "signature": "(db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "temp_data_dir",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_snapshot_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "empty_db",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSCDWriter",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_first_load_creates_initial_records",
      "signature": "(self, empty_db, temp_data_dir, sample_snapshot_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_second_load_handles_updates",
      "signature": "(self, empty_db, temp_data_dir, sample_snapshot_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_id_sequence_continuity",
      "signature": "(self, empty_db, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dry_run_mode",
      "signature": "(self, empty_db, temp_data_dir, sample_snapshot_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_no_changes_scenario",
      "signature": "(self, empty_db, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_missing_snapshot_table_error",
      "signature": "(self, empty_db, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_missing_diff_tables_error",
      "signature": "(self, empty_db, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_partition_columns_helper",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_count_files_helper",
      "signature": "(self, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_idempotent_operation",
      "signature": "(self, empty_db, temp_data_dir, sample_snapshot_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_attach_symbols_master_new_dataset",
      "signature": "(self, empty_db, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_attach_symbols_master_existing_dataset",
      "signature": "(self, empty_db, temp_data_dir)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_rollback_on_parquet_write_failure",
      "signature": "(self, empty_db, temp_data_dir, sample_snapshot_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_partition_column_collision_detection",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/ingestion/normalizer/test_symbol_views.py": [
    {
      "type": "class",
      "name": "TestSymbolViews",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "fixture_master",
      "signature": "(self)",
      "returns": "list[dict]"
    },
    {
      "type": "function",
      "name": "_setup_symbols_master_table",
      "signature": "(self, conn, rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_latest_view_rowcount",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_latest_view_uniqueness",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_history_contains_all",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_valid_to_null_only_in_latest",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_latest_view_returns_most_recent_valid_from",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_view_idempotence",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_downstream_join_sanity",
      "signature": "(self, fixture_master)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_missing_symbols_master_table",
      "signature": "(self)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_sql_file_path_resolution",
      "signature": "(self)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_performance_view_creation_speed",
      "signature": "(self, fixture_master)",
      "returns": "None"
    }
  ],
  "tests/ingestion/normalizer/test_symbol_normalizer.py": [
    {
      "type": "class",
      "name": "TestSymbolNormalizer",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "fixture_rows",
      "signature": "(self)",
      "returns": "list[dict]"
    },
    {
      "type": "function",
      "name": "_run_normalization_sql",
      "signature": "(self, conn)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "_setup_stage_table",
      "signature": "(self, conn, rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_dedup_count",
      "signature": "(self, fixture_rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_id_stability",
      "signature": "(self, fixture_rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_natural_key_choice",
      "signature": "(self, fixture_rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_all_columns_preserved",
      "signature": "(self, fixture_rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_dense_id_assignment",
      "signature": "(self, fixture_rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_natural_key_deterministic_ordering",
      "signature": "(self, fixture_rows)",
      "returns": "None"
    },
    {
      "type": "function",
      "name": "test_provider_tie_breaking",
      "signature": "(self)",
      "returns": "None"
    }
  ],
  "tests/unit/test_deprecated_modules.py": [
    {
      "type": "class",
      "name": "TestCliOldDeprecation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_old_deprecation_warning",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_old_app_attribute_access",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_old_ohlcv_app_attribute_access",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_old_invalid_attribute_raises_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestMetricsEventHandlersDeprecation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_event_handlers_deprecation_warning",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_event_handlers_setup_function",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestDomainEventHandlers",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_domain_event_handlers_is_empty",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestionConnectorsInit",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingestion_connectors_import",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/test_ddd_guard_rails.py": [
    {
      "type": "class",
      "name": "TestDDDArchitecturalBoundaries",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_domain_layer_has_no_infrastructure_imports",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_domain_services_are_pure_business_logic",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestMetricsGuardRails",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_increment_after_refactor",
      "signature": "(self, mock_record_metric, mock_requests)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_event_bus_metrics_integration",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_bootstrap_event_registration",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestApplicationLayerIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_application_service_handles_events",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingestion_application_service_coordination",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestInfrastructureIsolation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_infrastructure_modules_exist",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_event_publishers_in_infrastructure",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/test_metrics_integration.py": [
    {
      "type": "function",
      "name": "temp_db",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "metrics_repo",
      "signature": "(temp_db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_metrics_repository_record_and_retrieve",
      "signature": "(metrics_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_metrics_repository_list_metrics",
      "signature": "(metrics_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_metrics_repository_averages",
      "signature": "(metrics_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sqlite_metrics_repository_performance_trends",
      "signature": "(metrics_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_record_metric_function_updates_prometheus_and_sqlite",
      "signature": "(temp_db)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_repository_handles_empty_database",
      "signature": "(metrics_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_repository_handles_invalid_queries",
      "signature": "(metrics_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_prometheus_metrics_integration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metric_point_dataclass",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_trend_point_dataclass",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/test_main.py": [
    {
      "type": "function",
      "name": "test_main_module_entry_point",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_main_module_cli_execution",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/test_metrics_server.py": [
    {
      "type": "function",
      "name": "test_metrics_app_wsgi_interface",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "start_response",
      "signature": "(status, headers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_server_run_legacy_multiprocess_mode",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_server_run_legacy_single_process_mode",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_server_run_legacy_default_port",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_server_run_async_mode",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_async_run",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_metrics_server_basic_functionality",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_lag_monitor",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_server_respects_multiprocess_environment",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/config/test_ingestion_config.py": [
    {
      "type": "class",
      "name": "TestIngestionJobConfig",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_valid_config_creation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_default_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_symbol_validation_and_normalization",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_date_range_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_batch_size_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_feed_type_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_yaml_success",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_yaml_kebab_case",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_yaml_file_not_found",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_yaml_invalid_yaml",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_yaml_invalid_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_merge_overrides",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_flag_override_yaml",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_to_dict",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/aggregation/test_duckdb_engine_coverage.py": [
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_initialization",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_aggregate_job",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_no_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_write_aggregated_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_get_aggregated_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_error_handling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_aggregation_engine_sql_error_handling",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/aggregation/test_duckdb_views_unit.py": [
    {
      "type": "function",
      "name": "mock_connection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_connection_caching",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_connection_settings",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_attach_partition_existing_path",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_attach_partition_nonexistent_path",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_attach_partition_duckdb_error",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ensure_views",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_refresh_views",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_success",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_empty_sql",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_duckdb_error",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_available_data_success",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_available_data_error",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_views_all_accessible",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_views_some_inaccessible",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_execute",
      "signature": "(sql)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_set_agg_root",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_set_agg_root_with_string",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_module_constants",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_logging",
      "signature": "(caplog)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ensure_views_logging",
      "signature": "(caplog)",
      "returns": null
    }
  ],
  "tests/unit/aggregation/test_duckdb_engine.py": [
    {
      "type": "function",
      "name": "test_duckdb_sql",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_duckdb_sql_execution",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/application/test_ingestion_job_service.py": [
    {
      "type": "function",
      "name": "create_test_configuration",
      "signature": "()",
      "returns": "IngestionConfiguration"
    },
    {
      "type": "function",
      "name": "create_test_batch_configuration",
      "signature": "()",
      "returns": "BatchConfiguration"
    },
    {
      "type": "function",
      "name": "create_recent_time_range",
      "signature": "()",
      "returns": "TimeRange"
    },
    {
      "type": "function",
      "name": "ingestion_job_service",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestCreateIngestionJob",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_creates_job_successfully_with_valid_command",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validates_job_schedule_against_active_jobs",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_allows_non_overlapping_jobs",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestStartIngestionJob",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_starts_pending_job_successfully",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fails_to_start_nonexistent_job",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestCancelIngestionJob",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cancels_pending_job_successfully",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestGetJobStatus",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_returns_job_status_for_existing_job",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_returns_none_for_nonexistent_job",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestGetActiveJobs",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_returns_only_active_jobs",
      "signature": "(self, ingestion_job_service)",
      "returns": null
    }
  ],
  "tests/unit/services/test_gap_detector.py": [
    {
      "type": "class",
      "name": "TestGapDetectorService",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_with_timeframe",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_no_symbol_directory",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_empty_symbol_directory",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_with_existing_files",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_no_missing_files",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_multiple_years",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_malformed_directories",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_case_insensitive_symbol",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_missing_days_async",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_existing_days_boundary_filtering",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/metrics/test_ingestion_metrics_collection.py": [
    {
      "type": "class",
      "name": "TestIngestionMetricsCollection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_market_data_provider_request_counter_increments_correctly",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_metrics_endpoint_serves_ingestion_metrics",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_provider_metrics_are_labeled_correctly",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_alpaca_market_data_adapter.py": [
    {
      "type": "class",
      "name": "TestAlpacaMarketDataAdapterTranslation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_translates_alpaca_bar_format_to_domain_ohlcv_bar",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_handles_alpaca_short_field_names",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_raises_translation_error_for_invalid_price_data",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_raises_translation_error_for_missing_required_fields",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestAlpacaMarketDataAdapterFetching",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_bars_converts_timestamp_parameters_correctly",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_bars_raises_provider_error_on_client_failure",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_bars_returns_empty_list_for_no_data",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_fetch_bars_handles_partial_translation_failures_gracefully",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestAlpacaMarketDataAdapterConfiguration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_adapter_returns_correct_provider_information",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_adapter_detects_sip_vs_iex_feed_capabilities",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_test_connection_functionality",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_domain_event_handlers.py": [
    {
      "type": "function",
      "name": "test_log_ingestion_job_completed_success",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_log_ingestion_job_completed_failure",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_log_validation_failed",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_log_bar_collection_completed",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_register_logging_handlers",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_setup_metrics_event_handlers",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_parquet_storage_engine.py": [
    {
      "type": "function",
      "name": "sample_df",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "engine",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestParquetStorageEngineInitialization",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_creates_root_directory",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_with_compression",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_invalid_compression_raises_error",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_with_string_path",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestParquetStorageEngineWrite",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_basic",
      "signature": "(self, engine, sample_df, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_empty_dataframe_raises_error",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_missing_required_columns_raises_error",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_file_exists_without_overwrite_raises_error",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_with_overwrite",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_cleanup_on_failure",
      "signature": "(self, mock_write_table, engine, sample_df, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_append_to_job_new_file",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_append_to_job_existing_file",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestParquetStorageEngineRead",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_partition_existing",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_partition_nonexistent",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_partition_multiple_files",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_job_bars_single_symbol",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_job_bars_multiple_symbols",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_job_bars_nonexistent_job",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_symbol_data_basic",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_symbol_data_with_date_filter",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_symbol_data_nonexistent_symbol",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestParquetStorageEngineUtilities",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_delete_job_existing",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_delete_job_nonexistent",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_jobs",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_jobs_nonexistent_symbol",
      "signature": "(self, engine)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_storage_stats",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_integrity_healthy",
      "signature": "(self, engine, sample_df)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_integrity_with_corrupted_file",
      "signature": "(self, engine, sample_df, tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestParquetStorageEngineErrorHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_partition_handles_read_errors",
      "signature": "(self, mock_read_table, engine, sample_df, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_job_bars_handles_read_errors",
      "signature": "(self, mock_read_parquet, engine, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_and_load_roundtrip",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_job_roundtrip",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_verification_service.py": [
    {
      "type": "function",
      "name": "verification_service",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_output_path",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestionVerificationService",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verify_ingestion_success",
      "signature": "(self, verification_service, mock_output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verify_ingestion_date_mismatch",
      "signature": "(self, verification_service, mock_output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verify_ingestion_no_data",
      "signature": "(self, verification_service, mock_output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verify_ingestion_multiple_symbols",
      "signature": "(self, verification_service, mock_output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_query_side_effect",
      "signature": "(symbol, output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_check_date_boundaries_within_tolerance",
      "signature": "(self, verification_service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_check_date_boundaries_outside_tolerance",
      "signature": "(self, verification_service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_symbol_bounds_with_mocked_duckdb",
      "signature": "(self, verification_service, mock_output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_symbol_bounds_duckdb_error",
      "signature": "(self, verification_service, mock_output_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_print_verification_summary_success",
      "signature": "(self, verification_service, capsys)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_print_verification_summary_failure",
      "signature": "(self, verification_service, capsys)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_sqlite_domain_repositories.py": [
    {
      "type": "function",
      "name": "temp_db_path",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_symbol",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_trading_date",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_timestamp",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_ohlcv_bar",
      "signature": "(sample_symbol, sample_timestamp)",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_bars",
      "signature": "(sample_symbol)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSqliteSymbolBarsRepository",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_and_get_aggregate",
      "signature": "(self, temp_db_path, sample_symbol, sample_trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_nonexistent_aggregate",
      "signature": "(self, temp_db_path, sample_symbol, sample_trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_duplicate_aggregate_raises_error",
      "signature": "(self, temp_db_path, sample_symbol, sample_trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrency_error_on_version_mismatch",
      "signature": "(self, temp_db_path, sample_symbol, sample_trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_find_symbols_with_data",
      "signature": "(self, temp_db_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_completion_status",
      "signature": "(self, temp_db_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_delete_aggregate",
      "signature": "(self, temp_db_path, sample_symbol, sample_trading_date)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSqliteOHLCVRepository",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_and_get_bars",
      "signature": "(self, temp_db_path, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_duplicate_bars_raises_error",
      "signature": "(self, temp_db_path, sample_ohlcv_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_bars_for_multiple_symbols",
      "signature": "(self, temp_db_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_exists_check",
      "signature": "(self, temp_db_path, sample_ohlcv_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_count_bars",
      "signature": "(self, temp_db_path, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_latest_timestamp",
      "signature": "(self, temp_db_path, sample_bars)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSqliteCheckpointRepository",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_and_get_checkpoint",
      "signature": "(self, temp_db_path, sample_symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_nonexistent_checkpoint",
      "signature": "(self, temp_db_path, sample_symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_update_checkpoint",
      "signature": "(self, temp_db_path, sample_symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_delete_checkpoint",
      "signature": "(self, temp_db_path, sample_symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_checkpoints",
      "signature": "(self, temp_db_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestRepositoryErrorHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_database_path_raises_repository_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_repository_handles_invalid_data_gracefully",
      "signature": "(self, temp_db_path)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestRepositoryIdempotency",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_saves_are_idempotent",
      "signature": "(self, temp_db_path, sample_symbol, sample_trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_access_safety",
      "signature": "(self, temp_db_path, sample_symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "update_checkpoint",
      "signature": "(symbol_suffix, value)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_alpaca_timestamp_fix.py": [
    {
      "type": "class",
      "name": "TestAlpacaTimestampFix",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_timestamp_conversion_from_nanoseconds",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_timestamp_conversion_legacy_format",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_timestamp_no_bogus_offset",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_timestamp_boundary_dates",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_alpaca_timestamp_trading_hours",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_alpaca_client_pagination_and_retry.py": [
    {
      "type": "class",
      "name": "TestAlpacaClientPaginationHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_client_handles_multiple_pages_for_symbol_data_retrieval",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(url, params, headers, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_client_processes_paginated_symbol_data_in_correct_order",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(url, params, headers, timeout)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestAlpacaClientAsyncOperations",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_client_retrieves_symbol_data_correctly",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "class",
      "name": "MockAsyncClient",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, *args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aenter__",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "__aexit__",
      "signature": "(self, exc_type, exc, tb)",
      "returns": null
    },
    {
      "type": "function",
      "name": "get",
      "signature": "(self, url, params, headers)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestAlpacaClientRateLimitHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_client_retries_after_rate_limit_response_from_alpaca",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(url, params, headers, timeout)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_client_applies_exponential_backoff_for_rate_limit_retries",
      "signature": "(self, monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_get",
      "signature": "(url, params, headers, timeout)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_ingestion_writer.py": [
    {
      "type": "class",
      "name": "TestWriteParquet",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_parquet_basic_functionality",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_parquet_empty_rows_raises_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_parquet_overwrite_behavior",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_parquet_compression_options",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_write_parquet_creates_directory_structure",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_pooling.py": [
    {
      "type": "function",
      "name": "test_pool_reuse",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_database_pools",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_connection_configuration",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_access",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "worker",
      "signature": "(worker_id)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pool_growth_under_load",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "hold_connection",
      "signature": "(duration)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pool_stats",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_directory_creation",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_close_all_pools",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_init_conn_configuration",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_exception_handling_in_context",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_default_database_path",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_migrations.py": [
    {
      "type": "function",
      "name": "test_migrations_apply_once",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrations_create_schema_version_table",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrations_create_core_tables",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrations_create_indexes",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migration_failure_rollback",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "path_side_effect",
      "signature": "(*args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_migrations_directory",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_partial_migrations_applied",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrations_with_nonexistent_database_dir",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_concurrent_migration_application",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "apply_migrations",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_parquet_storage.py": [
    {
      "type": "function",
      "name": "test_store_bars_writes_parquet_and_returns_partition",
      "signature": "(tmp_path)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_event_publishers.py": [
    {
      "type": "class",
      "name": "MockDomainEvent",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, event_type)",
      "returns": null
    },
    {
      "type": "function",
      "name": "event_type",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "aggregate_id",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "event_id",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "version",
      "signature": "(self)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "occurred_at",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "_get_event_data",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "class",
      "name": "TestInMemoryEventPublisher",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_publisher_initialization",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_publish_single_event",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_publish_many_events",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sync_event_handler",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_event_handler",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "async_handler",
      "signature": "(event)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_handlers_for_same_event_type",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_handler_exception_does_not_break_publisher",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "failing_handler",
      "signature": "(event)",
      "returns": null
    },
    {
      "type": "function",
      "name": "working_handler",
      "signature": "(event)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_async_handler_exception_does_not_break_publisher",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "failing_async_handler",
      "signature": "(event)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_published_events_returns_copy",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_clear_events",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/infrastructure/test_boundary_check_timestamp_fix.py": [
    {
      "type": "class",
      "name": "TestBoundaryCheckTimestampFix",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_passes_with_correct_timestamps",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_detects_wrong_date_range",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_timestamp_no_longer_stuck_in_2020",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_market_hours_timestamps_correct",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/domain/test_ingestion_job_entity.py": [
    {
      "type": "function",
      "name": "create_test_ingestion_configuration",
      "signature": "()",
      "returns": "IngestionConfiguration"
    },
    {
      "type": "function",
      "name": "create_test_ingestion_job",
      "signature": "()",
      "returns": "IngestionJob"
    },
    {
      "type": "class",
      "name": "TestIngestionJobCreation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_creates_job_with_valid_parameters",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validates_symbols_not_empty",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validates_no_duplicate_symbols",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validates_time_range_order",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validates_no_future_dates",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestionJobLifecycle",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_job_can_be_started_when_pending",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_job_cannot_be_started_twice",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_job_can_be_completed_when_all_symbols_processed",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_job_can_be_failed_with_error_message",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_job_can_be_cancelled",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestionJobSymbolProcessing",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_marks_symbol_as_processed_correctly",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cannot_process_symbol_not_in_job",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cannot_process_same_symbol_twice",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_calculates_progress_percentage_correctly",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestionJobDomainEvents",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_emits_job_started_event_when_started",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_emits_batch_processed_event_when_symbol_completed",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_emits_job_completed_event_when_job_finishes",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_emits_job_failed_event_when_job_fails",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/domain/test_calculation_service.py": [
    {
      "type": "function",
      "name": "service",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "symbol",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_bars",
      "signature": "(symbol)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestOHLCVCalculationService",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_calculation_with_vwap_data",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_calculation_without_vwap_data",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_with_zero_volume_bars",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_with_empty_bars_raises_error",
      "signature": "(self, service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_with_all_zero_volume_raises_error",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_daily_summary_calculation",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_daily_summary_with_empty_bars_raises_error",
      "signature": "(self, service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_daily_summary_with_mixed_symbols_raises_error",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_daily_summary_with_mixed_dates_raises_error",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resample_to_5_minute_bars",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resample_with_invalid_frame_seconds_raises_error",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resample_with_empty_bars_returns_empty",
      "signature": "(self, service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resample_with_unsorted_bars_raises_error",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resample_with_mixed_symbols_raises_error",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregate_bars_to_timeframe_delegates_to_resample",
      "signature": "(self, service, sample_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_resample_vwap_calculation",
      "signature": "(self, service, symbol)",
      "returns": null
    }
  ],
  "tests/unit/domain/test_validation_service.py": [
    {
      "type": "function",
      "name": "service",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "symbol",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "valid_bar",
      "signature": "(symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "valid_bars",
      "signature": "(symbol)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestMarketDataValidationService",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_bar_with_valid_bar_returns_no_errors",
      "signature": "(self, service, valid_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_bar_checks_price_reasonableness",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_bar_with_weekend_timestamp_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_bar_with_after_hours_timestamp_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_bar_with_early_hours_timestamp_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_valid_bars_returns_no_errors",
      "signature": "(self, service, valid_bars)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_empty_list_returns_no_errors",
      "signature": "(self, service)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_non_monotonic_timestamps_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_extreme_price_movements_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_zero_volume_price_movement_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_sustained_zero_volume_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_with_extreme_volume_spike_returns_errors",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_batch_returns_validation_errors_for_business_rules",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_trading_hours_with_valid_hours_returns_no_errors",
      "signature": "(self, service, valid_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_trading_hours_with_custom_hours",
      "signature": "(self, service, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_price_movements_with_no_previous_bar_returns_no_errors",
      "signature": "(self, service, valid_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_volume_patterns_with_insufficient_bars_returns_no_errors",
      "signature": "(self, service, valid_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_validation_errors_in_single_bar",
      "signature": "(self, service, symbol)",
      "returns": null
    }
  ],
  "tests/unit/domain/test_symbol.py": [
    {
      "type": "class",
      "name": "TestSymbolRecordValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_valid_sample_json_passes",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_strings_become_none",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_enum_validation_fails",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_status_enum_validation_fails",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_date_order_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_valid_date_order_passes",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_free_float_constraint_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_round_trip_dict",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestFieldValidation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ticker_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_figi_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cusip_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_isin_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cik_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_exchange_mic_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_currency_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_country_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_shares_outstanding_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_free_float_validation",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProviderMethods",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_from_provider_generic",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_from_provider_polygon_mapping",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_from_provider_nasdaq_mapping",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSerialization",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_to_parquet_row",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_from_parquet_row",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parquet_round_trip",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestRequiredFields",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_missing_required_fields_fail",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestEdgeCases",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_minimal_required_record",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_text_field_whitespace_handling",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_asset_classes",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_status_values",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/domain/test_symbol_bars_aggregate.py": [
    {
      "type": "function",
      "name": "symbol",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "trading_date",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "aggregate",
      "signature": "(symbol, trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_bar",
      "signature": "(symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "sample_bar_2",
      "signature": "(symbol)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSymbolBarsAggregate",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_initialization",
      "signature": "(self, symbol, trading_date)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_add_bar_starts_collection_and_emits_events",
      "signature": "(self, aggregate, sample_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_add_bar_maintains_running_totals",
      "signature": "(self, aggregate, sample_bar, sample_bar_2)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_add_bar_duplicate_timestamp_raises_error",
      "signature": "(self, aggregate, sample_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_add_bar_wrong_symbol_raises_error",
      "signature": "(self, aggregate, sample_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_add_bar_wrong_date_raises_error",
      "signature": "(self, aggregate, sample_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_add_bar_after_completion_raises_error",
      "signature": "(self, aggregate, sample_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_close_day_completes_and_returns_summary",
      "signature": "(self, aggregate, sample_bar, sample_bar_2)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_close_day_with_no_bars_raises_error",
      "signature": "(self, aggregate)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_calculate_daily_summary_without_completion",
      "signature": "(self, aggregate, sample_bar, sample_bar_2)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_calculation_with_mixed_volume",
      "signature": "(self, aggregate, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_vwap_calculation_with_zero_volume_bars",
      "signature": "(self, aggregate, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_bars_in_range",
      "signature": "(self, aggregate, sample_bar, sample_bar_2)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_has_gaps_detection",
      "signature": "(self, aggregate, symbol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_event_commitment",
      "signature": "(self, aggregate, sample_bar)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_event_bus_integration",
      "signature": "(self, mock_publish, aggregate, sample_bar)",
      "returns": null
    }
  ],
  "tests/unit/validation/test_validation_domain.py": [
    {
      "type": "function",
      "name": "_bar",
      "signature": "(ts, open_price, high_price, low_price, close_price, vol)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_passes_for_valid_bars",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_non_monotonic_timestamps",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_zero_prices",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_negative_volume",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_timestamp_misalignment",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_extreme_price_movements",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_zero_volume_with_price_movement",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validation_detects_unreasonably_high_volume",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_trading_hours",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_price_reasonableness",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlc_consistency_validation_in_domain_service",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_timestamp_alignment_validation",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/validation/test_commands.py": [
    {
      "type": "function",
      "name": "test_validate_job_command_creation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_job_command_equality",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_job_command_different_values",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/validation/test_csv_report_repo.py": [
    {
      "type": "function",
      "name": "tmp_repo",
      "signature": "(tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "validation_result_with_errors",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "validation_result_no_errors",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_and_load_with_errors",
      "signature": "(tmp_repo, validation_result_with_errors)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_save_and_load_no_errors",
      "signature": "(tmp_repo, validation_result_no_errors)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_reports_empty_directory",
      "signature": "(tmp_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_reports_with_job_id_filter",
      "signature": "(tmp_repo, validation_result_with_errors, validation_result_no_errors)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_list_reports_nonexistent_job",
      "signature": "(tmp_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_load_report_nonexistent_file",
      "signature": "(tmp_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_report_summary_with_errors",
      "signature": "(tmp_repo, validation_result_with_errors)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_get_report_summary_no_errors",
      "signature": "(tmp_repo, validation_result_no_errors)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_symbols_same_job",
      "signature": "(tmp_repo)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_file_sorting_by_modification_time",
      "signature": "(tmp_repo, validation_result_with_errors)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_empty_csv_handling",
      "signature": "(tmp_repo)",
      "returns": null
    }
  ],
  "tests/unit/events/test_event_bus.py": [
    {
      "type": "class",
      "name": "SampleEvent",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "__init__",
      "signature": "(self, test_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "event_type",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "aggregate_id",
      "signature": "(self)",
      "returns": "str"
    },
    {
      "type": "function",
      "name": "event_id",
      "signature": "(self)",
      "returns": "UUID"
    },
    {
      "type": "function",
      "name": "occurred_at",
      "signature": "(self)",
      "returns": "datetime"
    },
    {
      "type": "function",
      "name": "version",
      "signature": "(self)",
      "returns": "int"
    },
    {
      "type": "function",
      "name": "_get_event_data",
      "signature": "(self)",
      "returns": "dict"
    },
    {
      "type": "function",
      "name": "test_event_subscription_and_publishing",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_subscribers",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "handler1",
      "signature": "(event)",
      "returns": null
    },
    {
      "type": "function",
      "name": "handler2",
      "signature": "(event)",
      "returns": null
    }
  ],
  "tests/unit/events/test_ingest_to_agg.py": [
    {
      "type": "function",
      "name": "test_subscribe_and_publish",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_aggregate_job",
      "signature": "(self, job_id, sql_pairs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_service_handles_multiple_events",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_aggregate_job",
      "signature": "(self, job_id, sql_pairs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregation_service_error_handling",
      "signature": "(monkeypatch)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_aggregate_job_with_error",
      "signature": "(self, job_id, sql_pairs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_manual_aggregation",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_aggregate_job",
      "signature": "(job_id, sql_pairs)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_ingest_cli_config.py": [
    {
      "type": "class",
      "name": "TestIngestCliConfig",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_config_file_loading",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_config_override_with_flags",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_direct_flags_without_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_missing_required_flags_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_kebab_case_config_loading",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_yaml_syntax_error",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_ingest_output_handling.py": [
    {
      "type": "class",
      "name": "TestCLIOutputHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_output_flag_creates_custom_directory",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verification_failure_exits_with_error",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_default_output_path_when_no_flag",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verification_service_gets_correct_parameters",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestProviderSuggestions",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_suggestions_in_output",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_boundary_check_with_suggestions",
      "signature": "(*args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_verification_error_handling",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestIngestOutputHandling",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_prevents_stale_data",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_accepts_correct_data",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_error_message_format",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_successful_ingest_message_format",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_requires_mandatory_options",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_ingest_cli.py": [
    {
      "type": "function",
      "name": "test_ingest_cli_smoke",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingest_cli_with_multiple_symbols",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingest_cli_handles_service_errors",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingest_cli_handles_missing_credentials",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/unit/cli/test_utils.py": [
    {
      "type": "class",
      "name": "TestCliUtils",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parse_time_window_valid_formats",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_parse_time_window_invalid_formats",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_empty_list",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_single_value",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_ascending_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_descending_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_constant_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_mixed_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_negative_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_create_sparkline_float_values",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_providers_function_exists",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_time_window_parsing_edge_cases",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sparkline_normalization",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sparkline_with_outliers",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_sparkline_unicode_characters",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_providers_function_with_providers",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_providers_function_no_providers",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_providers_function_exception_handling",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrate_function_success",
      "signature": "(self, mock_echo, mock_apply_pending, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_migrate_function_failure",
      "signature": "(self, mock_echo, mock_apply_pending, tmp_path)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_cli_help_displays_correctly.py": [
    {
      "type": "class",
      "name": "TestCliHelpDisplay",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_main_cli_help_displays_marketpipe_etl_commands",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ingestion_cli_help_displays_domain_driven_commands",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_legacy_ingestion_module_removed",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_query_cli.py": [
    {
      "type": "function",
      "name": "runner",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_query_data",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_basic_success",
      "signature": "(runner, mock_query_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_csv_output",
      "signature": "(runner, mock_query_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_with_limit",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_empty_result",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_sql_error",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_import_error",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_markdown_format",
      "signature": "(runner, mock_query_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_markdown_fallback",
      "signature": "(runner, mock_query_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_complex_sql",
      "signature": "(runner, mock_query_data)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_help",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_various_sql_patterns",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_with_special_characters",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_limit_behavior",
      "signature": "(runner)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_query_command_csv_with_special_values",
      "signature": "(runner)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_ingest_cli_boundary_integration.py": [
    {
      "type": "class",
      "name": "TestIngestCLIBoundaryIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_requires_start_end_without_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_cli_requires_symbols_without_config",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_called_after_ingestion",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_failure_exits_cli",
      "signature": "(self, mock_asyncio_run, mock_build_services, mock_check_boundaries, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_boundary_check_fail",
      "signature": "(*args, **kwargs)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_help_shows_updated_descriptions",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_symbols_boundary_check",
      "signature": "(self, mock_asyncio_run, mock_build_services, mock_check_boundaries, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_date_format_handling",
      "signature": "(self)",
      "returns": null
    }
  ],
  "tests/unit/cli/test_ingest_boundary_check.py": [
    {
      "type": "class",
      "name": "TestBoundaryCheck",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_success",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_data_outside_range",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_data_incomplete_range",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_no_data_found",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_duckdb_error",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_date_string_conversion",
      "signature": "(self, tmp_path)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boundary_check_future_data",
      "signature": "(self, tmp_path)",
      "returns": null
    }
  ],
  "tests/cli/test_symbols_cli.py": [
    {
      "type": "class",
      "name": "TestSymbolsUpdateCommand",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_help_shows_flags",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_unknown_provider_exits",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_preview_mode_requires_execute",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_multiple_providers_aggregate",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_all_providers_used_when_none_specified",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_environment_variables_respected",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_explicit_flags_override_environment",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_date_parsing_works",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_boolean_flags_work",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_execute_flag_triggers_pipeline",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_plan_summary_shows_all_parameters",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_no_filesystem_operations_without_execute",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_date_format_handled",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_provider_order_preserved",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_execute_overrides_dry_run",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    }
  ],
  "tests/cli/test_symbols_modes.py": [
    {
      "type": "function",
      "name": "create_mock_duckdb_connection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_sql_query",
      "signature": "(query_str)",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSymbolsModes",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dry_run_with_execute_precedence",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_diff_only_error_combo",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backfill_diff_only_error_combo",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backfill_runs_multiple_days",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_diff_only_path",
      "signature": "(self, mock_duckdb, mock_refresh, mock_scd, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_sql_with_data",
      "signature": "(query_str)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_combined_backfill_dry_run",
      "signature": "(self, mock_duckdb, mock_normalize, mock_get_provider, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_symbols",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_pipeline_failure_propagates_exit_code",
      "signature": "(self, mock_get_provider, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "failing_fetch",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_invalid_date_format_error",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_performance_backfill_three_days",
      "signature": "(self, mock_duckdb, mock_normalize, mock_get_provider, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_symbols",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_dry_run_without_execute_shows_preview",
      "signature": "(self, mock_duckdb, mock_normalize, mock_get_provider, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_symbols",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_backfill_date_after_snapshot_error",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_large_backfill_warning_and_confirmation",
      "signature": "(self, mock_confirm, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_large_backfill_warning_shows_for_over_365_days",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_diff_only_missing_table_error",
      "signature": "(self, mock_duckdb, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_diff_only_empty_table_error",
      "signature": "(self, mock_duckdb, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_snapshot_date_format_validation",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_progress_feedback_verbose_mode",
      "signature": "(self, mock_duckdb, mock_refresh, mock_scd, mock_normalize, mock_get_provider, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "mock_fetch_symbols",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/cli/test_symbols_execute.py": [
    {
      "type": "function",
      "name": "create_mock_duckdb_connection",
      "signature": "()",
      "returns": null
    },
    {
      "type": "class",
      "name": "TestSymbolsExecuteIntegration",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "setup_method",
      "signature": "(self)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_full_execute_dummy",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_execute_missing_provider_token",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_execute_without_flag_shows_preview",
      "signature": "(self, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_execute_creates_database_views",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_rerun_same_snapshot_adds_zero_rows",
      "signature": "(self, mock_run_pipeline, mock_list_providers)",
      "returns": null
    }
  ],
  "tests/cli/test_help_no_side_effects.py": [
    {
      "type": "function",
      "name": "test_help_no_side_effects",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_help_no_side_effects",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_individual_command_help_no_side_effects",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_import_cli_no_side_effects",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/cli/test_new_command_paths.py": [
    {
      "type": "function",
      "name": "test_ingest_ohlcv_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_ingest_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_validate_ohlcv_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_validate_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_aggregate_ohlcv_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_aggregate_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_subcommand_list",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_utility_commands_help",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_structure_consistency",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_main_app_help_lists_commands",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_command_consistency_both_paths",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_non_existent_command_fails",
      "signature": "()",
      "returns": null
    }
  ],
  "tests/cli/test_deprecated_alias.py": [
    {
      "type": "function",
      "name": "test_deprecated_ingest_command_warning",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_validate_command_warning",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_deprecated_aggregate_command_warning",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_new_commands_work",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_ohlcv_subcommands_work",
      "signature": "()",
      "returns": null
    },
    {
      "type": "function",
      "name": "test_subprocess_deprecated_warning",
      "signature": "()",
      "returns": null
    }
  ]
}
